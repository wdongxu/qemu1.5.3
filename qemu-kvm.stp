/* This file is autogenerated by tracetool, do not edit. */
probe qemu.kvm.qemu_memalign = process("/usr/libexec/qemu-kvm").mark("qemu_memalign")
{
  alignment = $arg1;
  size = $arg2;
  ptr = $arg3;
}
probe qemu.kvm.qemu_anon_ram_alloc = process("/usr/libexec/qemu-kvm").mark("qemu_anon_ram_alloc")
{
  size = $arg1;
  ptr = $arg2;
}
probe qemu.kvm.qemu_vfree = process("/usr/libexec/qemu-kvm").mark("qemu_vfree")
{
  ptr = $arg1;
}
probe qemu.kvm.qemu_anon_ram_free = process("/usr/libexec/qemu-kvm").mark("qemu_anon_ram_free")
{
  ptr = $arg1;
  size = $arg2;
}
probe qemu.kvm.virtqueue_fill = process("/usr/libexec/qemu-kvm").mark("virtqueue_fill")
{
  vq = $arg1;
  elem = $arg2;
  len = $arg3;
  idx = $arg4;
}
probe qemu.kvm.virtqueue_flush = process("/usr/libexec/qemu-kvm").mark("virtqueue_flush")
{
  vq = $arg1;
  count = $arg2;
}
probe qemu.kvm.virtqueue_pop = process("/usr/libexec/qemu-kvm").mark("virtqueue_pop")
{
  vq = $arg1;
  elem = $arg2;
  in_num = $arg3;
  out_num = $arg4;
}
probe qemu.kvm.virtio_queue_notify = process("/usr/libexec/qemu-kvm").mark("virtio_queue_notify")
{
  vdev = $arg1;
  n = $arg2;
  vq = $arg3;
}
probe qemu.kvm.virtio_irq = process("/usr/libexec/qemu-kvm").mark("virtio_irq")
{
  vq = $arg1;
}
probe qemu.kvm.virtio_notify = process("/usr/libexec/qemu-kvm").mark("virtio_notify")
{
  vdev = $arg1;
  vq = $arg2;
}
probe qemu.kvm.virtio_set_status = process("/usr/libexec/qemu-kvm").mark("virtio_set_status")
{
  vdev = $arg1;
  val = $arg2;
}
probe qemu.kvm.virtio_serial_send_control_event = process("/usr/libexec/qemu-kvm").mark("virtio_serial_send_control_event")
{
  port = $arg1;
  event = $arg2;
  value = $arg3;
}
probe qemu.kvm.virtio_serial_throttle_port = process("/usr/libexec/qemu-kvm").mark("virtio_serial_throttle_port")
{
  port = $arg1;
  throttle = $arg2;
}
probe qemu.kvm.virtio_serial_handle_control_message = process("/usr/libexec/qemu-kvm").mark("virtio_serial_handle_control_message")
{
  event = $arg1;
  value = $arg2;
}
probe qemu.kvm.virtio_serial_handle_control_message_port = process("/usr/libexec/qemu-kvm").mark("virtio_serial_handle_control_message_port")
{
  port = $arg1;
}
probe qemu.kvm.virtio_console_flush_buf = process("/usr/libexec/qemu-kvm").mark("virtio_console_flush_buf")
{
  port = $arg1;
  len = $arg2;
  ret = $arg3;
}
probe qemu.kvm.virtio_console_chr_read = process("/usr/libexec/qemu-kvm").mark("virtio_console_chr_read")
{
  port = $arg1;
  size = $arg2;
}
probe qemu.kvm.virtio_console_chr_event = process("/usr/libexec/qemu-kvm").mark("virtio_console_chr_event")
{
  port = $arg1;
  event = $arg2;
}
probe qemu.kvm.bdrv_open_common = process("/usr/libexec/qemu-kvm").mark("bdrv_open_common")
{
  bs = $arg1;
  filename = $arg2;
  flags = $arg3;
  format_name = $arg4;
}
probe qemu.kvm.multiwrite_cb = process("/usr/libexec/qemu-kvm").mark("multiwrite_cb")
{
  mcb = $arg1;
  ret = $arg2;
}
probe qemu.kvm.bdrv_aio_multiwrite = process("/usr/libexec/qemu-kvm").mark("bdrv_aio_multiwrite")
{
  mcb = $arg1;
  num_callbacks = $arg2;
  num_reqs = $arg3;
}
probe qemu.kvm.bdrv_aio_discard = process("/usr/libexec/qemu-kvm").mark("bdrv_aio_discard")
{
  bs = $arg1;
  sector_num = $arg2;
  nb_sectors = $arg3;
  opaque = $arg4;
}
probe qemu.kvm.bdrv_aio_flush = process("/usr/libexec/qemu-kvm").mark("bdrv_aio_flush")
{
  bs = $arg1;
  opaque = $arg2;
}
probe qemu.kvm.bdrv_aio_readv = process("/usr/libexec/qemu-kvm").mark("bdrv_aio_readv")
{
  bs = $arg1;
  sector_num = $arg2;
  nb_sectors = $arg3;
  opaque = $arg4;
}
probe qemu.kvm.bdrv_aio_writev = process("/usr/libexec/qemu-kvm").mark("bdrv_aio_writev")
{
  bs = $arg1;
  sector_num = $arg2;
  nb_sectors = $arg3;
  opaque = $arg4;
}
probe qemu.kvm.bdrv_aio_write_zeroes = process("/usr/libexec/qemu-kvm").mark("bdrv_aio_write_zeroes")
{
  bs = $arg1;
  sector_num = $arg2;
  nb_sectors = $arg3;
  flags = $arg4;
  opaque = $arg5;
}
probe qemu.kvm.bdrv_lock_medium = process("/usr/libexec/qemu-kvm").mark("bdrv_lock_medium")
{
  bs = $arg1;
  locked = $arg2;
}
probe qemu.kvm.bdrv_co_readv = process("/usr/libexec/qemu-kvm").mark("bdrv_co_readv")
{
  bs = $arg1;
  sector_num = $arg2;
  nb_sector = $arg3;
}
probe qemu.kvm.bdrv_co_copy_on_readv = process("/usr/libexec/qemu-kvm").mark("bdrv_co_copy_on_readv")
{
  bs = $arg1;
  sector_num = $arg2;
  nb_sector = $arg3;
}
probe qemu.kvm.bdrv_co_writev = process("/usr/libexec/qemu-kvm").mark("bdrv_co_writev")
{
  bs = $arg1;
  sector_num = $arg2;
  nb_sector = $arg3;
}
probe qemu.kvm.bdrv_co_write_zeroes = process("/usr/libexec/qemu-kvm").mark("bdrv_co_write_zeroes")
{
  bs = $arg1;
  sector_num = $arg2;
  nb_sector = $arg3;
  flags = $arg4;
}
probe qemu.kvm.bdrv_co_io_em = process("/usr/libexec/qemu-kvm").mark("bdrv_co_io_em")
{
  bs = $arg1;
  sector_num = $arg2;
  nb_sectors = $arg3;
  is_write = $arg4;
  acb = $arg5;
}
probe qemu.kvm.bdrv_co_do_copy_on_readv = process("/usr/libexec/qemu-kvm").mark("bdrv_co_do_copy_on_readv")
{
  bs = $arg1;
  sector_num = $arg2;
  nb_sectors = $arg3;
  cluster_sector_num = $arg4;
  cluster_nb_sectors = $arg5;
}
probe qemu.kvm.stream_one_iteration = process("/usr/libexec/qemu-kvm").mark("stream_one_iteration")
{
  s = $arg1;
  sector_num = $arg2;
  nb_sectors = $arg3;
  is_allocated = $arg4;
}
probe qemu.kvm.stream_start = process("/usr/libexec/qemu-kvm").mark("stream_start")
{
  bs = $arg1;
  base = $arg2;
  s = $arg3;
  co = $arg4;
  opaque = $arg5;
}
probe qemu.kvm.commit_one_iteration = process("/usr/libexec/qemu-kvm").mark("commit_one_iteration")
{
  s = $arg1;
  sector_num = $arg2;
  nb_sectors = $arg3;
  is_allocated = $arg4;
}
probe qemu.kvm.commit_start = process("/usr/libexec/qemu-kvm").mark("commit_start")
{
  bs = $arg1;
  base = $arg2;
  top = $arg3;
  s = $arg4;
  co = $arg5;
  opaque = $arg6;
}
probe qemu.kvm.mirror_start = process("/usr/libexec/qemu-kvm").mark("mirror_start")
{
  bs = $arg1;
  s = $arg2;
  co = $arg3;
  opaque = $arg4;
}
probe qemu.kvm.mirror_restart_iter = process("/usr/libexec/qemu-kvm").mark("mirror_restart_iter")
{
  s = $arg1;
  cnt = $arg2;
}
probe qemu.kvm.mirror_before_flush = process("/usr/libexec/qemu-kvm").mark("mirror_before_flush")
{
  s = $arg1;
}
probe qemu.kvm.mirror_before_drain = process("/usr/libexec/qemu-kvm").mark("mirror_before_drain")
{
  s = $arg1;
  cnt = $arg2;
}
probe qemu.kvm.mirror_before_sleep = process("/usr/libexec/qemu-kvm").mark("mirror_before_sleep")
{
  s = $arg1;
  cnt = $arg2;
  synced = $arg3;
}
probe qemu.kvm.mirror_one_iteration = process("/usr/libexec/qemu-kvm").mark("mirror_one_iteration")
{
  s = $arg1;
  sector_num = $arg2;
  nb_sectors = $arg3;
}
probe qemu.kvm.mirror_iteration_done = process("/usr/libexec/qemu-kvm").mark("mirror_iteration_done")
{
  s = $arg1;
  sector_num = $arg2;
  nb_sectors = $arg3;
  ret = $arg4;
}
probe qemu.kvm.mirror_yield = process("/usr/libexec/qemu-kvm").mark("mirror_yield")
{
  s = $arg1;
  cnt = $arg2;
  buf_free_count = $arg3;
  in_flight = $arg4;
}
probe qemu.kvm.mirror_yield_in_flight = process("/usr/libexec/qemu-kvm").mark("mirror_yield_in_flight")
{
  s = $arg1;
  sector_num = $arg2;
  in_flight = $arg3;
}
probe qemu.kvm.mirror_yield_buf_busy = process("/usr/libexec/qemu-kvm").mark("mirror_yield_buf_busy")
{
  s = $arg1;
  nb_chunks = $arg2;
  in_flight = $arg3;
}
probe qemu.kvm.mirror_break_buf_busy = process("/usr/libexec/qemu-kvm").mark("mirror_break_buf_busy")
{
  s = $arg1;
  nb_chunks = $arg2;
  in_flight = $arg3;
}
probe qemu.kvm.qmp_block_job_cancel = process("/usr/libexec/qemu-kvm").mark("qmp_block_job_cancel")
{
  job = $arg1;
}
probe qemu.kvm.qmp_block_job_pause = process("/usr/libexec/qemu-kvm").mark("qmp_block_job_pause")
{
  job = $arg1;
}
probe qemu.kvm.qmp_block_job_resume = process("/usr/libexec/qemu-kvm").mark("qmp_block_job_resume")
{
  job = $arg1;
}
probe qemu.kvm.qmp_block_job_complete = process("/usr/libexec/qemu-kvm").mark("qmp_block_job_complete")
{
  job = $arg1;
}
probe qemu.kvm.block_job_cb = process("/usr/libexec/qemu-kvm").mark("block_job_cb")
{
  bs = $arg1;
  job = $arg2;
  ret = $arg3;
}
probe qemu.kvm.qmp_block_stream = process("/usr/libexec/qemu-kvm").mark("qmp_block_stream")
{
  bs = $arg1;
  job = $arg2;
}
probe qemu.kvm.virtio_blk_req_complete = process("/usr/libexec/qemu-kvm").mark("virtio_blk_req_complete")
{
  req = $arg1;
  status = $arg2;
}
probe qemu.kvm.virtio_blk_rw_complete = process("/usr/libexec/qemu-kvm").mark("virtio_blk_rw_complete")
{
  req = $arg1;
  ret = $arg2;
}
probe qemu.kvm.virtio_blk_handle_write = process("/usr/libexec/qemu-kvm").mark("virtio_blk_handle_write")
{
  req = $arg1;
  sector = $arg2;
  nsectors = $arg3;
}
probe qemu.kvm.virtio_blk_handle_read = process("/usr/libexec/qemu-kvm").mark("virtio_blk_handle_read")
{
  req = $arg1;
  sector = $arg2;
  nsectors = $arg3;
}
probe qemu.kvm.virtio_blk_data_plane_start = process("/usr/libexec/qemu-kvm").mark("virtio_blk_data_plane_start")
{
  s = $arg1;
}
probe qemu.kvm.virtio_blk_data_plane_stop = process("/usr/libexec/qemu-kvm").mark("virtio_blk_data_plane_stop")
{
  s = $arg1;
}
probe qemu.kvm.virtio_blk_data_plane_process_request = process("/usr/libexec/qemu-kvm").mark("virtio_blk_data_plane_process_request")
{
  s = $arg1;
  out_num = $arg2;
  in_num = $arg3;
  head = $arg4;
}
probe qemu.kvm.virtio_blk_data_plane_complete_request = process("/usr/libexec/qemu-kvm").mark("virtio_blk_data_plane_complete_request")
{
  s = $arg1;
  head = $arg2;
  ret = $arg3;
}
probe qemu.kvm.vring_setup = process("/usr/libexec/qemu-kvm").mark("vring_setup")
{
  physical = $arg1;
  desc = $arg2;
  avail = $arg3;
  used = $arg4;
}
probe qemu.kvm.thread_pool_submit = process("/usr/libexec/qemu-kvm").mark("thread_pool_submit")
{
  pool = $arg1;
  req = $arg2;
  opaque = $arg3;
}
probe qemu.kvm.thread_pool_complete = process("/usr/libexec/qemu-kvm").mark("thread_pool_complete")
{
  pool = $arg1;
  req = $arg2;
  opaque = $arg3;
  ret = $arg4;
}
probe qemu.kvm.thread_pool_cancel = process("/usr/libexec/qemu-kvm").mark("thread_pool_cancel")
{
  req = $arg1;
  opaque = $arg2;
}
probe qemu.kvm.paio_submit_co = process("/usr/libexec/qemu-kvm").mark("paio_submit_co")
{
  sector_num = $arg1;
  nb_sectors = $arg2;
  type = $arg3;
}
probe qemu.kvm.paio_submit = process("/usr/libexec/qemu-kvm").mark("paio_submit")
{
  acb = $arg1;
  opaque = $arg2;
  sector_num = $arg3;
  nb_sectors = $arg4;
  type = $arg5;
}
probe qemu.kvm.cpu_in = process("/usr/libexec/qemu-kvm").mark("cpu_in")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.cpu_out = process("/usr/libexec/qemu-kvm").mark("cpu_out")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.balloon_event = process("/usr/libexec/qemu-kvm").mark("balloon_event")
{
  opaque = $arg1;
  addr = $arg2;
}
probe qemu.kvm.cpu_set_apic_base = process("/usr/libexec/qemu-kvm").mark("cpu_set_apic_base")
{
  val = $arg1;
}
probe qemu.kvm.cpu_get_apic_base = process("/usr/libexec/qemu-kvm").mark("cpu_get_apic_base")
{
  val = $arg1;
}
probe qemu.kvm.apic_report_irq_delivered = process("/usr/libexec/qemu-kvm").mark("apic_report_irq_delivered")
{
  apic_irq_delivered = $arg1;
}
probe qemu.kvm.apic_reset_irq_delivered = process("/usr/libexec/qemu-kvm").mark("apic_reset_irq_delivered")
{
  apic_irq_delivered = $arg1;
}
probe qemu.kvm.apic_get_irq_delivered = process("/usr/libexec/qemu-kvm").mark("apic_get_irq_delivered")
{
  apic_irq_delivered = $arg1;
}
probe qemu.kvm.apic_local_deliver = process("/usr/libexec/qemu-kvm").mark("apic_local_deliver")
{
  vector = $arg1;
  lvt = $arg2;
}
probe qemu.kvm.apic_deliver_irq = process("/usr/libexec/qemu-kvm").mark("apic_deliver_irq")
{
  dest = $arg1;
  dest_mode = $arg2;
  delivery_mode = $arg3;
  vector_num = $arg4;
  trigger_mode = $arg5;
}
probe qemu.kvm.apic_mem_readl = process("/usr/libexec/qemu-kvm").mark("apic_mem_readl")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.apic_mem_writel = process("/usr/libexec/qemu-kvm").mark("apic_mem_writel")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.cs4231_mem_readl_dreg = process("/usr/libexec/qemu-kvm").mark("cs4231_mem_readl_dreg")
{
  reg = $arg1;
  ret = $arg2;
}
probe qemu.kvm.cs4231_mem_readl_reg = process("/usr/libexec/qemu-kvm").mark("cs4231_mem_readl_reg")
{
  reg = $arg1;
  ret = $arg2;
}
probe qemu.kvm.cs4231_mem_writel_reg = process("/usr/libexec/qemu-kvm").mark("cs4231_mem_writel_reg")
{
  reg = $arg1;
  old = $arg2;
  val = $arg3;
}
probe qemu.kvm.cs4231_mem_writel_dreg = process("/usr/libexec/qemu-kvm").mark("cs4231_mem_writel_dreg")
{
  reg = $arg1;
  old = $arg2;
  val = $arg3;
}
probe qemu.kvm.nvram_read = process("/usr/libexec/qemu-kvm").mark("nvram_read")
{
  addr = $arg1;
  ret = $arg2;
}
probe qemu.kvm.nvram_write = process("/usr/libexec/qemu-kvm").mark("nvram_write")
{
  addr = $arg1;
  old = $arg2;
  val = $arg3;
}
probe qemu.kvm.ecc_mem_writel_mer = process("/usr/libexec/qemu-kvm").mark("ecc_mem_writel_mer")
{
  val = $arg1;
}
probe qemu.kvm.ecc_mem_writel_mdr = process("/usr/libexec/qemu-kvm").mark("ecc_mem_writel_mdr")
{
  val = $arg1;
}
probe qemu.kvm.ecc_mem_writel_mfsr = process("/usr/libexec/qemu-kvm").mark("ecc_mem_writel_mfsr")
{
  val = $arg1;
}
probe qemu.kvm.ecc_mem_writel_vcr = process("/usr/libexec/qemu-kvm").mark("ecc_mem_writel_vcr")
{
  val = $arg1;
}
probe qemu.kvm.ecc_mem_writel_dr = process("/usr/libexec/qemu-kvm").mark("ecc_mem_writel_dr")
{
  val = $arg1;
}
probe qemu.kvm.ecc_mem_writel_ecr0 = process("/usr/libexec/qemu-kvm").mark("ecc_mem_writel_ecr0")
{
  val = $arg1;
}
probe qemu.kvm.ecc_mem_writel_ecr1 = process("/usr/libexec/qemu-kvm").mark("ecc_mem_writel_ecr1")
{
  val = $arg1;
}
probe qemu.kvm.ecc_mem_readl_mer = process("/usr/libexec/qemu-kvm").mark("ecc_mem_readl_mer")
{
  ret = $arg1;
}
probe qemu.kvm.ecc_mem_readl_mdr = process("/usr/libexec/qemu-kvm").mark("ecc_mem_readl_mdr")
{
  ret = $arg1;
}
probe qemu.kvm.ecc_mem_readl_mfsr = process("/usr/libexec/qemu-kvm").mark("ecc_mem_readl_mfsr")
{
  ret = $arg1;
}
probe qemu.kvm.ecc_mem_readl_vcr = process("/usr/libexec/qemu-kvm").mark("ecc_mem_readl_vcr")
{
  ret = $arg1;
}
probe qemu.kvm.ecc_mem_readl_mfar0 = process("/usr/libexec/qemu-kvm").mark("ecc_mem_readl_mfar0")
{
  ret = $arg1;
}
probe qemu.kvm.ecc_mem_readl_mfar1 = process("/usr/libexec/qemu-kvm").mark("ecc_mem_readl_mfar1")
{
  ret = $arg1;
}
probe qemu.kvm.ecc_mem_readl_dr = process("/usr/libexec/qemu-kvm").mark("ecc_mem_readl_dr")
{
  ret = $arg1;
}
probe qemu.kvm.ecc_mem_readl_ecr0 = process("/usr/libexec/qemu-kvm").mark("ecc_mem_readl_ecr0")
{
  ret = $arg1;
}
probe qemu.kvm.ecc_mem_readl_ecr1 = process("/usr/libexec/qemu-kvm").mark("ecc_mem_readl_ecr1")
{
  ret = $arg1;
}
probe qemu.kvm.ecc_diag_mem_writeb = process("/usr/libexec/qemu-kvm").mark("ecc_diag_mem_writeb")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.ecc_diag_mem_readb = process("/usr/libexec/qemu-kvm").mark("ecc_diag_mem_readb")
{
  addr = $arg1;
  ret = $arg2;
}
probe qemu.kvm.fw_cfg_write = process("/usr/libexec/qemu-kvm").mark("fw_cfg_write")
{
  s = $arg1;
  value = $arg2;
}
probe qemu.kvm.fw_cfg_select = process("/usr/libexec/qemu-kvm").mark("fw_cfg_select")
{
  s = $arg1;
  key = $arg2;
  ret = $arg3;
}
probe qemu.kvm.fw_cfg_read = process("/usr/libexec/qemu-kvm").mark("fw_cfg_read")
{
  s = $arg1;
  ret = $arg2;
}
probe qemu.kvm.fw_cfg_add_file_dupe = process("/usr/libexec/qemu-kvm").mark("fw_cfg_add_file_dupe")
{
  s = $arg1;
  name = $arg2;
}
probe qemu.kvm.fw_cfg_add_file = process("/usr/libexec/qemu-kvm").mark("fw_cfg_add_file")
{
  s = $arg1;
  index = $arg2;
  name = $arg3;
  len = $arg4;
}
probe qemu.kvm.hd_geometry_lchs_guess = process("/usr/libexec/qemu-kvm").mark("hd_geometry_lchs_guess")
{
  bs = $arg1;
  cyls = $arg2;
  heads = $arg3;
  secs = $arg4;
}
probe qemu.kvm.hd_geometry_guess = process("/usr/libexec/qemu-kvm").mark("hd_geometry_guess")
{
  bs = $arg1;
  cyls = $arg2;
  heads = $arg3;
  secs = $arg4;
  trans = $arg5;
}
probe qemu.kvm.jazz_led_read = process("/usr/libexec/qemu-kvm").mark("jazz_led_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.jazz_led_write = process("/usr/libexec/qemu-kvm").mark("jazz_led_write")
{
  addr = $arg1;
  new = $arg2;
}
probe qemu.kvm.lance_mem_readw = process("/usr/libexec/qemu-kvm").mark("lance_mem_readw")
{
  addr = $arg1;
  ret = $arg2;
}
probe qemu.kvm.lance_mem_writew = process("/usr/libexec/qemu-kvm").mark("lance_mem_writew")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.slavio_intctl_mem_readl = process("/usr/libexec/qemu-kvm").mark("slavio_intctl_mem_readl")
{
  cpu = $arg1;
  addr = $arg2;
  ret = $arg3;
}
probe qemu.kvm.slavio_intctl_mem_writel = process("/usr/libexec/qemu-kvm").mark("slavio_intctl_mem_writel")
{
  cpu = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.kvm.slavio_intctl_mem_writel_clear = process("/usr/libexec/qemu-kvm").mark("slavio_intctl_mem_writel_clear")
{
  cpu = $arg1;
  val = $arg2;
  intreg_pending = $arg3;
}
probe qemu.kvm.slavio_intctl_mem_writel_set = process("/usr/libexec/qemu-kvm").mark("slavio_intctl_mem_writel_set")
{
  cpu = $arg1;
  val = $arg2;
  intreg_pending = $arg3;
}
probe qemu.kvm.slavio_intctlm_mem_readl = process("/usr/libexec/qemu-kvm").mark("slavio_intctlm_mem_readl")
{
  addr = $arg1;
  ret = $arg2;
}
probe qemu.kvm.slavio_intctlm_mem_writel = process("/usr/libexec/qemu-kvm").mark("slavio_intctlm_mem_writel")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.slavio_intctlm_mem_writel_enable = process("/usr/libexec/qemu-kvm").mark("slavio_intctlm_mem_writel_enable")
{
  val = $arg1;
  intregm_disabled = $arg2;
}
probe qemu.kvm.slavio_intctlm_mem_writel_disable = process("/usr/libexec/qemu-kvm").mark("slavio_intctlm_mem_writel_disable")
{
  val = $arg1;
  intregm_disabled = $arg2;
}
probe qemu.kvm.slavio_intctlm_mem_writel_target = process("/usr/libexec/qemu-kvm").mark("slavio_intctlm_mem_writel_target")
{
  cpu = $arg1;
}
probe qemu.kvm.slavio_check_interrupts = process("/usr/libexec/qemu-kvm").mark("slavio_check_interrupts")
{
  pending = $arg1;
  intregm_disabled = $arg2;
}
probe qemu.kvm.slavio_set_irq = process("/usr/libexec/qemu-kvm").mark("slavio_set_irq")
{
  target_cpu = $arg1;
  irq = $arg2;
  pil = $arg3;
  level = $arg4;
}
probe qemu.kvm.slavio_set_timer_irq_cpu = process("/usr/libexec/qemu-kvm").mark("slavio_set_timer_irq_cpu")
{
  cpu = $arg1;
  level = $arg2;
}
probe qemu.kvm.slavio_misc_update_irq_raise = process("/usr/libexec/qemu-kvm").mark("slavio_misc_update_irq_raise")
{
}
probe qemu.kvm.slavio_misc_update_irq_lower = process("/usr/libexec/qemu-kvm").mark("slavio_misc_update_irq_lower")
{
}
probe qemu.kvm.slavio_set_power_fail = process("/usr/libexec/qemu-kvm").mark("slavio_set_power_fail")
{
  power_failing = $arg1;
  config = $arg2;
}
probe qemu.kvm.slavio_cfg_mem_writeb = process("/usr/libexec/qemu-kvm").mark("slavio_cfg_mem_writeb")
{
  val = $arg1;
}
probe qemu.kvm.slavio_cfg_mem_readb = process("/usr/libexec/qemu-kvm").mark("slavio_cfg_mem_readb")
{
  ret = $arg1;
}
probe qemu.kvm.slavio_diag_mem_writeb = process("/usr/libexec/qemu-kvm").mark("slavio_diag_mem_writeb")
{
  val = $arg1;
}
probe qemu.kvm.slavio_diag_mem_readb = process("/usr/libexec/qemu-kvm").mark("slavio_diag_mem_readb")
{
  ret = $arg1;
}
probe qemu.kvm.slavio_mdm_mem_writeb = process("/usr/libexec/qemu-kvm").mark("slavio_mdm_mem_writeb")
{
  val = $arg1;
}
probe qemu.kvm.slavio_mdm_mem_readb = process("/usr/libexec/qemu-kvm").mark("slavio_mdm_mem_readb")
{
  ret = $arg1;
}
probe qemu.kvm.slavio_aux1_mem_writeb = process("/usr/libexec/qemu-kvm").mark("slavio_aux1_mem_writeb")
{
  val = $arg1;
}
probe qemu.kvm.slavio_aux1_mem_readb = process("/usr/libexec/qemu-kvm").mark("slavio_aux1_mem_readb")
{
  ret = $arg1;
}
probe qemu.kvm.slavio_aux2_mem_writeb = process("/usr/libexec/qemu-kvm").mark("slavio_aux2_mem_writeb")
{
  val = $arg1;
}
probe qemu.kvm.slavio_aux2_mem_readb = process("/usr/libexec/qemu-kvm").mark("slavio_aux2_mem_readb")
{
  ret = $arg1;
}
probe qemu.kvm.apc_mem_writeb = process("/usr/libexec/qemu-kvm").mark("apc_mem_writeb")
{
  val = $arg1;
}
probe qemu.kvm.apc_mem_readb = process("/usr/libexec/qemu-kvm").mark("apc_mem_readb")
{
  ret = $arg1;
}
probe qemu.kvm.slavio_sysctrl_mem_writel = process("/usr/libexec/qemu-kvm").mark("slavio_sysctrl_mem_writel")
{
  val = $arg1;
}
probe qemu.kvm.slavio_sysctrl_mem_readl = process("/usr/libexec/qemu-kvm").mark("slavio_sysctrl_mem_readl")
{
  ret = $arg1;
}
probe qemu.kvm.slavio_led_mem_writew = process("/usr/libexec/qemu-kvm").mark("slavio_led_mem_writew")
{
  val = $arg1;
}
probe qemu.kvm.slavio_led_mem_readw = process("/usr/libexec/qemu-kvm").mark("slavio_led_mem_readw")
{
  ret = $arg1;
}
probe qemu.kvm.slavio_timer_get_out = process("/usr/libexec/qemu-kvm").mark("slavio_timer_get_out")
{
  limit_ = $arg1;
  counthigh = $arg2;
  count = $arg3;
}
probe qemu.kvm.slavio_timer_irq = process("/usr/libexec/qemu-kvm").mark("slavio_timer_irq")
{
  counthigh = $arg1;
  count = $arg2;
}
probe qemu.kvm.slavio_timer_mem_readl_invalid = process("/usr/libexec/qemu-kvm").mark("slavio_timer_mem_readl_invalid")
{
  addr = $arg1;
}
probe qemu.kvm.slavio_timer_mem_readl = process("/usr/libexec/qemu-kvm").mark("slavio_timer_mem_readl")
{
  addr = $arg1;
  ret = $arg2;
}
probe qemu.kvm.slavio_timer_mem_writel = process("/usr/libexec/qemu-kvm").mark("slavio_timer_mem_writel")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.slavio_timer_mem_writel_limit = process("/usr/libexec/qemu-kvm").mark("slavio_timer_mem_writel_limit")
{
  timer_index = $arg1;
  count = $arg2;
}
probe qemu.kvm.slavio_timer_mem_writel_counter_invalid = process("/usr/libexec/qemu-kvm").mark("slavio_timer_mem_writel_counter_invalid")
{
}
probe qemu.kvm.slavio_timer_mem_writel_status_start = process("/usr/libexec/qemu-kvm").mark("slavio_timer_mem_writel_status_start")
{
  timer_index = $arg1;
}
probe qemu.kvm.slavio_timer_mem_writel_status_stop = process("/usr/libexec/qemu-kvm").mark("slavio_timer_mem_writel_status_stop")
{
  timer_index = $arg1;
}
probe qemu.kvm.slavio_timer_mem_writel_mode_user = process("/usr/libexec/qemu-kvm").mark("slavio_timer_mem_writel_mode_user")
{
  timer_index = $arg1;
}
probe qemu.kvm.slavio_timer_mem_writel_mode_counter = process("/usr/libexec/qemu-kvm").mark("slavio_timer_mem_writel_mode_counter")
{
  timer_index = $arg1;
}
probe qemu.kvm.slavio_timer_mem_writel_mode_invalid = process("/usr/libexec/qemu-kvm").mark("slavio_timer_mem_writel_mode_invalid")
{
}
probe qemu.kvm.slavio_timer_mem_writel_invalid = process("/usr/libexec/qemu-kvm").mark("slavio_timer_mem_writel_invalid")
{
  addr = $arg1;
}
probe qemu.kvm.ledma_memory_read = process("/usr/libexec/qemu-kvm").mark("ledma_memory_read")
{
  addr = $arg1;
}
probe qemu.kvm.ledma_memory_write = process("/usr/libexec/qemu-kvm").mark("ledma_memory_write")
{
  addr = $arg1;
}
probe qemu.kvm.sparc32_dma_set_irq_raise = process("/usr/libexec/qemu-kvm").mark("sparc32_dma_set_irq_raise")
{
}
probe qemu.kvm.sparc32_dma_set_irq_lower = process("/usr/libexec/qemu-kvm").mark("sparc32_dma_set_irq_lower")
{
}
probe qemu.kvm.espdma_memory_read = process("/usr/libexec/qemu-kvm").mark("espdma_memory_read")
{
  addr = $arg1;
}
probe qemu.kvm.espdma_memory_write = process("/usr/libexec/qemu-kvm").mark("espdma_memory_write")
{
  addr = $arg1;
}
probe qemu.kvm.sparc32_dma_mem_readl = process("/usr/libexec/qemu-kvm").mark("sparc32_dma_mem_readl")
{
  addr = $arg1;
  ret = $arg2;
}
probe qemu.kvm.sparc32_dma_mem_writel = process("/usr/libexec/qemu-kvm").mark("sparc32_dma_mem_writel")
{
  addr = $arg1;
  old = $arg2;
  val = $arg3;
}
probe qemu.kvm.sparc32_dma_enable_raise = process("/usr/libexec/qemu-kvm").mark("sparc32_dma_enable_raise")
{
}
probe qemu.kvm.sparc32_dma_enable_lower = process("/usr/libexec/qemu-kvm").mark("sparc32_dma_enable_lower")
{
}
probe qemu.kvm.sun4m_cpu_interrupt = process("/usr/libexec/qemu-kvm").mark("sun4m_cpu_interrupt")
{
  level = $arg1;
}
probe qemu.kvm.sun4m_cpu_reset_interrupt = process("/usr/libexec/qemu-kvm").mark("sun4m_cpu_reset_interrupt")
{
  level = $arg1;
}
probe qemu.kvm.sun4m_cpu_set_irq_raise = process("/usr/libexec/qemu-kvm").mark("sun4m_cpu_set_irq_raise")
{
  level = $arg1;
}
probe qemu.kvm.sun4m_cpu_set_irq_lower = process("/usr/libexec/qemu-kvm").mark("sun4m_cpu_set_irq_lower")
{
  level = $arg1;
}
probe qemu.kvm.sun4m_iommu_mem_readl = process("/usr/libexec/qemu-kvm").mark("sun4m_iommu_mem_readl")
{
  addr = $arg1;
  ret = $arg2;
}
probe qemu.kvm.sun4m_iommu_mem_writel = process("/usr/libexec/qemu-kvm").mark("sun4m_iommu_mem_writel")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.sun4m_iommu_mem_writel_ctrl = process("/usr/libexec/qemu-kvm").mark("sun4m_iommu_mem_writel_ctrl")
{
  iostart = $arg1;
}
probe qemu.kvm.sun4m_iommu_mem_writel_tlbflush = process("/usr/libexec/qemu-kvm").mark("sun4m_iommu_mem_writel_tlbflush")
{
  val = $arg1;
}
probe qemu.kvm.sun4m_iommu_mem_writel_pgflush = process("/usr/libexec/qemu-kvm").mark("sun4m_iommu_mem_writel_pgflush")
{
  val = $arg1;
}
probe qemu.kvm.sun4m_iommu_page_get_flags = process("/usr/libexec/qemu-kvm").mark("sun4m_iommu_page_get_flags")
{
  pa = $arg1;
  iopte = $arg2;
  ret = $arg3;
}
probe qemu.kvm.sun4m_iommu_translate_pa = process("/usr/libexec/qemu-kvm").mark("sun4m_iommu_translate_pa")
{
  addr = $arg1;
  pa = $arg2;
  iopte = $arg3;
}
probe qemu.kvm.sun4m_iommu_bad_addr = process("/usr/libexec/qemu-kvm").mark("sun4m_iommu_bad_addr")
{
  addr = $arg1;
}
probe qemu.kvm.usb_packet_state_change = process("/usr/libexec/qemu-kvm").mark("usb_packet_state_change")
{
  bus = $arg1;
  port = $arg2;
  ep = $arg3;
  p = $arg4;
  o = $arg5;
  n = $arg6;
}
probe qemu.kvm.usb_packet_state_fault = process("/usr/libexec/qemu-kvm").mark("usb_packet_state_fault")
{
  bus = $arg1;
  port = $arg2;
  ep = $arg3;
  p = $arg4;
  o = $arg5;
  n = $arg6;
}
probe qemu.kvm.usb_port_claim = process("/usr/libexec/qemu-kvm").mark("usb_port_claim")
{
  bus = $arg1;
  port = $arg2;
}
probe qemu.kvm.usb_port_attach = process("/usr/libexec/qemu-kvm").mark("usb_port_attach")
{
  bus = $arg1;
  port = $arg2;
  devspeed = $arg3;
  portspeed = $arg4;
}
probe qemu.kvm.usb_port_detach = process("/usr/libexec/qemu-kvm").mark("usb_port_detach")
{
  bus = $arg1;
  port = $arg2;
}
probe qemu.kvm.usb_port_release = process("/usr/libexec/qemu-kvm").mark("usb_port_release")
{
  bus = $arg1;
  port = $arg2;
}
probe qemu.kvm.usb_ehci_reset = process("/usr/libexec/qemu-kvm").mark("usb_ehci_reset")
{
}
probe qemu.kvm.usb_ehci_opreg_read = process("/usr/libexec/qemu-kvm").mark("usb_ehci_opreg_read")
{
  addr = $arg1;
  str = $arg2;
  val = $arg3;
}
probe qemu.kvm.usb_ehci_opreg_write = process("/usr/libexec/qemu-kvm").mark("usb_ehci_opreg_write")
{
  addr = $arg1;
  str = $arg2;
  val = $arg3;
}
probe qemu.kvm.usb_ehci_opreg_change = process("/usr/libexec/qemu-kvm").mark("usb_ehci_opreg_change")
{
  addr = $arg1;
  str = $arg2;
  new = $arg3;
  old = $arg4;
}
probe qemu.kvm.usb_ehci_portsc_read = process("/usr/libexec/qemu-kvm").mark("usb_ehci_portsc_read")
{
  addr = $arg1;
  port = $arg2;
  val = $arg3;
}
probe qemu.kvm.usb_ehci_portsc_write = process("/usr/libexec/qemu-kvm").mark("usb_ehci_portsc_write")
{
  addr = $arg1;
  port = $arg2;
  val = $arg3;
}
probe qemu.kvm.usb_ehci_portsc_change = process("/usr/libexec/qemu-kvm").mark("usb_ehci_portsc_change")
{
  addr = $arg1;
  port = $arg2;
  new = $arg3;
  old = $arg4;
}
probe qemu.kvm.usb_ehci_usbsts = process("/usr/libexec/qemu-kvm").mark("usb_ehci_usbsts")
{
  sts = $arg1;
  state = $arg2;
}
probe qemu.kvm.usb_ehci_state = process("/usr/libexec/qemu-kvm").mark("usb_ehci_state")
{
  schedule = $arg1;
  state = $arg2;
}
probe qemu.kvm.usb_ehci_qh_ptrs = process("/usr/libexec/qemu-kvm").mark("usb_ehci_qh_ptrs")
{
  q = $arg1;
  addr = $arg2;
  nxt = $arg3;
  c_qtd = $arg4;
  n_qtd = $arg5;
  a_qtd = $arg6;
}
probe qemu.kvm.usb_ehci_qh_fields = process("/usr/libexec/qemu-kvm").mark("usb_ehci_qh_fields")
{
  addr = $arg1;
  rl = $arg2;
  mplen = $arg3;
  eps = $arg4;
  ep = $arg5;
  devaddr = $arg6;
}
probe qemu.kvm.usb_ehci_qh_bits = process("/usr/libexec/qemu-kvm").mark("usb_ehci_qh_bits")
{
  addr = $arg1;
  c = $arg2;
  h = $arg3;
  dtc = $arg4;
  i = $arg5;
}
probe qemu.kvm.usb_ehci_qtd_ptrs = process("/usr/libexec/qemu-kvm").mark("usb_ehci_qtd_ptrs")
{
  q = $arg1;
  addr = $arg2;
  nxt = $arg3;
  altnext = $arg4;
}
probe qemu.kvm.usb_ehci_qtd_fields = process("/usr/libexec/qemu-kvm").mark("usb_ehci_qtd_fields")
{
  addr = $arg1;
  tbytes = $arg2;
  cpage = $arg3;
  cerr = $arg4;
  pid = $arg5;
}
probe qemu.kvm.usb_ehci_qtd_bits = process("/usr/libexec/qemu-kvm").mark("usb_ehci_qtd_bits")
{
  addr = $arg1;
  ioc = $arg2;
  active = $arg3;
  halt = $arg4;
  babble = $arg5;
  xacterr = $arg6;
}
probe qemu.kvm.usb_ehci_itd = process("/usr/libexec/qemu-kvm").mark("usb_ehci_itd")
{
  addr = $arg1;
  nxt = $arg2;
  mplen = $arg3;
  mult = $arg4;
  ep = $arg5;
  devaddr = $arg6;
}
probe qemu.kvm.usb_ehci_sitd = process("/usr/libexec/qemu-kvm").mark("usb_ehci_sitd")
{
  addr = $arg1;
  nxt = $arg2;
  active = $arg3;
}
probe qemu.kvm.usb_ehci_port_attach = process("/usr/libexec/qemu-kvm").mark("usb_ehci_port_attach")
{
  port = $arg1;
  owner = $arg2;
  device = $arg3;
}
probe qemu.kvm.usb_ehci_port_detach = process("/usr/libexec/qemu-kvm").mark("usb_ehci_port_detach")
{
  port = $arg1;
  owner = $arg2;
}
probe qemu.kvm.usb_ehci_port_reset = process("/usr/libexec/qemu-kvm").mark("usb_ehci_port_reset")
{
  port = $arg1;
  enable = $arg2;
}
probe qemu.kvm.usb_ehci_port_suspend = process("/usr/libexec/qemu-kvm").mark("usb_ehci_port_suspend")
{
  port = $arg1;
}
probe qemu.kvm.usb_ehci_port_wakeup = process("/usr/libexec/qemu-kvm").mark("usb_ehci_port_wakeup")
{
  port = $arg1;
}
probe qemu.kvm.usb_ehci_port_resume = process("/usr/libexec/qemu-kvm").mark("usb_ehci_port_resume")
{
  port = $arg1;
}
probe qemu.kvm.usb_ehci_queue_action = process("/usr/libexec/qemu-kvm").mark("usb_ehci_queue_action")
{
  q = $arg1;
  action = $arg2;
}
probe qemu.kvm.usb_ehci_packet_action = process("/usr/libexec/qemu-kvm").mark("usb_ehci_packet_action")
{
  q = $arg1;
  p = $arg2;
  action = $arg3;
}
probe qemu.kvm.usb_ehci_irq = process("/usr/libexec/qemu-kvm").mark("usb_ehci_irq")
{
  level = $arg1;
  frindex = $arg2;
  sts = $arg3;
  mask = $arg4;
}
probe qemu.kvm.usb_ehci_guest_bug = process("/usr/libexec/qemu-kvm").mark("usb_ehci_guest_bug")
{
  reason = $arg1;
}
probe qemu.kvm.usb_ehci_doorbell_ring = process("/usr/libexec/qemu-kvm").mark("usb_ehci_doorbell_ring")
{
}
probe qemu.kvm.usb_ehci_doorbell_ack = process("/usr/libexec/qemu-kvm").mark("usb_ehci_doorbell_ack")
{
}
probe qemu.kvm.usb_ehci_dma_error = process("/usr/libexec/qemu-kvm").mark("usb_ehci_dma_error")
{
}
probe qemu.kvm.usb_uhci_reset = process("/usr/libexec/qemu-kvm").mark("usb_uhci_reset")
{
}
probe qemu.kvm.usb_uhci_schedule_start = process("/usr/libexec/qemu-kvm").mark("usb_uhci_schedule_start")
{
}
probe qemu.kvm.usb_uhci_schedule_stop = process("/usr/libexec/qemu-kvm").mark("usb_uhci_schedule_stop")
{
}
probe qemu.kvm.usb_uhci_frame_start = process("/usr/libexec/qemu-kvm").mark("usb_uhci_frame_start")
{
  num = $arg1;
}
probe qemu.kvm.usb_uhci_frame_stop_bandwidth = process("/usr/libexec/qemu-kvm").mark("usb_uhci_frame_stop_bandwidth")
{
}
probe qemu.kvm.usb_uhci_frame_loop_stop_idle = process("/usr/libexec/qemu-kvm").mark("usb_uhci_frame_loop_stop_idle")
{
}
probe qemu.kvm.usb_uhci_frame_loop_continue = process("/usr/libexec/qemu-kvm").mark("usb_uhci_frame_loop_continue")
{
}
probe qemu.kvm.usb_uhci_mmio_readw = process("/usr/libexec/qemu-kvm").mark("usb_uhci_mmio_readw")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.usb_uhci_mmio_writew = process("/usr/libexec/qemu-kvm").mark("usb_uhci_mmio_writew")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.usb_uhci_queue_add = process("/usr/libexec/qemu-kvm").mark("usb_uhci_queue_add")
{
  token = $arg1;
}
probe qemu.kvm.usb_uhci_queue_del = process("/usr/libexec/qemu-kvm").mark("usb_uhci_queue_del")
{
  token = $arg1;
  reason = $arg2;
}
probe qemu.kvm.usb_uhci_packet_add = process("/usr/libexec/qemu-kvm").mark("usb_uhci_packet_add")
{
  token = $arg1;
  addr = $arg2;
}
probe qemu.kvm.usb_uhci_packet_link_async = process("/usr/libexec/qemu-kvm").mark("usb_uhci_packet_link_async")
{
  token = $arg1;
  addr = $arg2;
}
probe qemu.kvm.usb_uhci_packet_unlink_async = process("/usr/libexec/qemu-kvm").mark("usb_uhci_packet_unlink_async")
{
  token = $arg1;
  addr = $arg2;
}
probe qemu.kvm.usb_uhci_packet_cancel = process("/usr/libexec/qemu-kvm").mark("usb_uhci_packet_cancel")
{
  token = $arg1;
  addr = $arg2;
  done = $arg3;
}
probe qemu.kvm.usb_uhci_packet_complete_success = process("/usr/libexec/qemu-kvm").mark("usb_uhci_packet_complete_success")
{
  token = $arg1;
  addr = $arg2;
}
probe qemu.kvm.usb_uhci_packet_complete_shortxfer = process("/usr/libexec/qemu-kvm").mark("usb_uhci_packet_complete_shortxfer")
{
  token = $arg1;
  addr = $arg2;
}
probe qemu.kvm.usb_uhci_packet_complete_stall = process("/usr/libexec/qemu-kvm").mark("usb_uhci_packet_complete_stall")
{
  token = $arg1;
  addr = $arg2;
}
probe qemu.kvm.usb_uhci_packet_complete_babble = process("/usr/libexec/qemu-kvm").mark("usb_uhci_packet_complete_babble")
{
  token = $arg1;
  addr = $arg2;
}
probe qemu.kvm.usb_uhci_packet_complete_error = process("/usr/libexec/qemu-kvm").mark("usb_uhci_packet_complete_error")
{
  token = $arg1;
  addr = $arg2;
}
probe qemu.kvm.usb_uhci_packet_del = process("/usr/libexec/qemu-kvm").mark("usb_uhci_packet_del")
{
  token = $arg1;
  addr = $arg2;
}
probe qemu.kvm.usb_uhci_qh_load = process("/usr/libexec/qemu-kvm").mark("usb_uhci_qh_load")
{
  qh = $arg1;
}
probe qemu.kvm.usb_uhci_td_load = process("/usr/libexec/qemu-kvm").mark("usb_uhci_td_load")
{
  qh = $arg1;
  td = $arg2;
  ctrl = $arg3;
  token = $arg4;
}
probe qemu.kvm.usb_uhci_td_queue = process("/usr/libexec/qemu-kvm").mark("usb_uhci_td_queue")
{
  td = $arg1;
  ctrl = $arg2;
  token = $arg3;
}
probe qemu.kvm.usb_uhci_td_nextqh = process("/usr/libexec/qemu-kvm").mark("usb_uhci_td_nextqh")
{
  qh = $arg1;
  td = $arg2;
}
probe qemu.kvm.usb_uhci_td_async = process("/usr/libexec/qemu-kvm").mark("usb_uhci_td_async")
{
  qh = $arg1;
  td = $arg2;
}
probe qemu.kvm.usb_uhci_td_complete = process("/usr/libexec/qemu-kvm").mark("usb_uhci_td_complete")
{
  qh = $arg1;
  td = $arg2;
}
probe qemu.kvm.usb_xhci_reset = process("/usr/libexec/qemu-kvm").mark("usb_xhci_reset")
{
}
probe qemu.kvm.usb_xhci_run = process("/usr/libexec/qemu-kvm").mark("usb_xhci_run")
{
}
probe qemu.kvm.usb_xhci_stop = process("/usr/libexec/qemu-kvm").mark("usb_xhci_stop")
{
}
probe qemu.kvm.usb_xhci_cap_read = process("/usr/libexec/qemu-kvm").mark("usb_xhci_cap_read")
{
  off = $arg1;
  val = $arg2;
}
probe qemu.kvm.usb_xhci_oper_read = process("/usr/libexec/qemu-kvm").mark("usb_xhci_oper_read")
{
  off = $arg1;
  val = $arg2;
}
probe qemu.kvm.usb_xhci_port_read = process("/usr/libexec/qemu-kvm").mark("usb_xhci_port_read")
{
  port = $arg1;
  off = $arg2;
  val = $arg3;
}
probe qemu.kvm.usb_xhci_runtime_read = process("/usr/libexec/qemu-kvm").mark("usb_xhci_runtime_read")
{
  off = $arg1;
  val = $arg2;
}
probe qemu.kvm.usb_xhci_doorbell_read = process("/usr/libexec/qemu-kvm").mark("usb_xhci_doorbell_read")
{
  off = $arg1;
  val = $arg2;
}
probe qemu.kvm.usb_xhci_oper_write = process("/usr/libexec/qemu-kvm").mark("usb_xhci_oper_write")
{
  off = $arg1;
  val = $arg2;
}
probe qemu.kvm.usb_xhci_port_write = process("/usr/libexec/qemu-kvm").mark("usb_xhci_port_write")
{
  port = $arg1;
  off = $arg2;
  val = $arg3;
}
probe qemu.kvm.usb_xhci_runtime_write = process("/usr/libexec/qemu-kvm").mark("usb_xhci_runtime_write")
{
  off = $arg1;
  val = $arg2;
}
probe qemu.kvm.usb_xhci_doorbell_write = process("/usr/libexec/qemu-kvm").mark("usb_xhci_doorbell_write")
{
  off = $arg1;
  val = $arg2;
}
probe qemu.kvm.usb_xhci_irq_intx = process("/usr/libexec/qemu-kvm").mark("usb_xhci_irq_intx")
{
  level = $arg1;
}
probe qemu.kvm.usb_xhci_irq_msi = process("/usr/libexec/qemu-kvm").mark("usb_xhci_irq_msi")
{
  nr = $arg1;
}
probe qemu.kvm.usb_xhci_irq_msix = process("/usr/libexec/qemu-kvm").mark("usb_xhci_irq_msix")
{
  nr = $arg1;
}
probe qemu.kvm.usb_xhci_irq_msix_use = process("/usr/libexec/qemu-kvm").mark("usb_xhci_irq_msix_use")
{
  nr = $arg1;
}
probe qemu.kvm.usb_xhci_irq_msix_unuse = process("/usr/libexec/qemu-kvm").mark("usb_xhci_irq_msix_unuse")
{
  nr = $arg1;
}
probe qemu.kvm.usb_xhci_queue_event = process("/usr/libexec/qemu-kvm").mark("usb_xhci_queue_event")
{
  vector = $arg1;
  idx = $arg2;
  trb = $arg3;
  evt = $arg4;
  param = $arg5;
  status = $arg6;
  control = $arg7;
}
probe qemu.kvm.usb_xhci_fetch_trb = process("/usr/libexec/qemu-kvm").mark("usb_xhci_fetch_trb")
{
  addr = $arg1;
  name = $arg2;
  param = $arg3;
  status = $arg4;
  control = $arg5;
}
probe qemu.kvm.usb_xhci_port_reset = process("/usr/libexec/qemu-kvm").mark("usb_xhci_port_reset")
{
  port = $arg1;
  warm = $arg2;
}
probe qemu.kvm.usb_xhci_port_link = process("/usr/libexec/qemu-kvm").mark("usb_xhci_port_link")
{
  port = $arg1;
  pls = $arg2;
}
probe qemu.kvm.usb_xhci_port_notify = process("/usr/libexec/qemu-kvm").mark("usb_xhci_port_notify")
{
  port = $arg1;
  pls = $arg2;
}
probe qemu.kvm.usb_xhci_slot_enable = process("/usr/libexec/qemu-kvm").mark("usb_xhci_slot_enable")
{
  slotid = $arg1;
}
probe qemu.kvm.usb_xhci_slot_disable = process("/usr/libexec/qemu-kvm").mark("usb_xhci_slot_disable")
{
  slotid = $arg1;
}
probe qemu.kvm.usb_xhci_slot_address = process("/usr/libexec/qemu-kvm").mark("usb_xhci_slot_address")
{
  slotid = $arg1;
  port = $arg2;
}
probe qemu.kvm.usb_xhci_slot_configure = process("/usr/libexec/qemu-kvm").mark("usb_xhci_slot_configure")
{
  slotid = $arg1;
}
probe qemu.kvm.usb_xhci_slot_evaluate = process("/usr/libexec/qemu-kvm").mark("usb_xhci_slot_evaluate")
{
  slotid = $arg1;
}
probe qemu.kvm.usb_xhci_slot_reset = process("/usr/libexec/qemu-kvm").mark("usb_xhci_slot_reset")
{
  slotid = $arg1;
}
probe qemu.kvm.usb_xhci_ep_enable = process("/usr/libexec/qemu-kvm").mark("usb_xhci_ep_enable")
{
  slotid = $arg1;
  epid = $arg2;
}
probe qemu.kvm.usb_xhci_ep_disable = process("/usr/libexec/qemu-kvm").mark("usb_xhci_ep_disable")
{
  slotid = $arg1;
  epid = $arg2;
}
probe qemu.kvm.usb_xhci_ep_set_dequeue = process("/usr/libexec/qemu-kvm").mark("usb_xhci_ep_set_dequeue")
{
  slotid = $arg1;
  epid = $arg2;
  streamid = $arg3;
  param = $arg4;
}
probe qemu.kvm.usb_xhci_ep_kick = process("/usr/libexec/qemu-kvm").mark("usb_xhci_ep_kick")
{
  slotid = $arg1;
  epid = $arg2;
  streamid = $arg3;
}
probe qemu.kvm.usb_xhci_ep_stop = process("/usr/libexec/qemu-kvm").mark("usb_xhci_ep_stop")
{
  slotid = $arg1;
  epid = $arg2;
}
probe qemu.kvm.usb_xhci_ep_reset = process("/usr/libexec/qemu-kvm").mark("usb_xhci_ep_reset")
{
  slotid = $arg1;
  epid = $arg2;
}
probe qemu.kvm.usb_xhci_ep_state = process("/usr/libexec/qemu-kvm").mark("usb_xhci_ep_state")
{
  slotid = $arg1;
  epid = $arg2;
  os = $arg3;
  ns = $arg4;
}
probe qemu.kvm.usb_xhci_xfer_start = process("/usr/libexec/qemu-kvm").mark("usb_xhci_xfer_start")
{
  xfer = $arg1;
  slotid = $arg2;
  epid = $arg3;
  streamid = $arg4;
}
probe qemu.kvm.usb_xhci_xfer_async = process("/usr/libexec/qemu-kvm").mark("usb_xhci_xfer_async")
{
  xfer = $arg1;
}
probe qemu.kvm.usb_xhci_xfer_nak = process("/usr/libexec/qemu-kvm").mark("usb_xhci_xfer_nak")
{
  xfer = $arg1;
}
probe qemu.kvm.usb_xhci_xfer_retry = process("/usr/libexec/qemu-kvm").mark("usb_xhci_xfer_retry")
{
  xfer = $arg1;
}
probe qemu.kvm.usb_xhci_xfer_success = process("/usr/libexec/qemu-kvm").mark("usb_xhci_xfer_success")
{
  xfer = $arg1;
  bytes = $arg2;
}
probe qemu.kvm.usb_xhci_xfer_error = process("/usr/libexec/qemu-kvm").mark("usb_xhci_xfer_error")
{
  xfer = $arg1;
  ret = $arg2;
}
probe qemu.kvm.usb_xhci_unimplemented = process("/usr/libexec/qemu-kvm").mark("usb_xhci_unimplemented")
{
  item = $arg1;
  nr = $arg2;
}
probe qemu.kvm.usb_desc_device = process("/usr/libexec/qemu-kvm").mark("usb_desc_device")
{
  addr = $arg1;
  len = $arg2;
  ret = $arg3;
}
probe qemu.kvm.usb_desc_device_qualifier = process("/usr/libexec/qemu-kvm").mark("usb_desc_device_qualifier")
{
  addr = $arg1;
  len = $arg2;
  ret = $arg3;
}
probe qemu.kvm.usb_desc_config = process("/usr/libexec/qemu-kvm").mark("usb_desc_config")
{
  addr = $arg1;
  index = $arg2;
  len = $arg3;
  ret = $arg4;
}
probe qemu.kvm.usb_desc_other_speed_config = process("/usr/libexec/qemu-kvm").mark("usb_desc_other_speed_config")
{
  addr = $arg1;
  index = $arg2;
  len = $arg3;
  ret = $arg4;
}
probe qemu.kvm.usb_desc_string = process("/usr/libexec/qemu-kvm").mark("usb_desc_string")
{
  addr = $arg1;
  index = $arg2;
  len = $arg3;
  ret = $arg4;
}
probe qemu.kvm.usb_desc_bos = process("/usr/libexec/qemu-kvm").mark("usb_desc_bos")
{
  addr = $arg1;
  len = $arg2;
  ret = $arg3;
}
probe qemu.kvm.usb_desc_msos = process("/usr/libexec/qemu-kvm").mark("usb_desc_msos")
{
  addr = $arg1;
  index = $arg2;
  len = $arg3;
  ret = $arg4;
}
probe qemu.kvm.usb_set_addr = process("/usr/libexec/qemu-kvm").mark("usb_set_addr")
{
  addr = $arg1;
}
probe qemu.kvm.usb_set_config = process("/usr/libexec/qemu-kvm").mark("usb_set_config")
{
  addr = $arg1;
  config = $arg2;
  ret = $arg3;
}
probe qemu.kvm.usb_set_interface = process("/usr/libexec/qemu-kvm").mark("usb_set_interface")
{
  addr = $arg1;
  iface = $arg2;
  alt = $arg3;
  ret = $arg4;
}
probe qemu.kvm.usb_clear_device_feature = process("/usr/libexec/qemu-kvm").mark("usb_clear_device_feature")
{
  addr = $arg1;
  feature = $arg2;
  ret = $arg3;
}
probe qemu.kvm.usb_set_device_feature = process("/usr/libexec/qemu-kvm").mark("usb_set_device_feature")
{
  addr = $arg1;
  feature = $arg2;
  ret = $arg3;
}
probe qemu.kvm.usb_hub_reset = process("/usr/libexec/qemu-kvm").mark("usb_hub_reset")
{
  addr = $arg1;
}
probe qemu.kvm.usb_hub_control = process("/usr/libexec/qemu-kvm").mark("usb_hub_control")
{
  addr = $arg1;
  request = $arg2;
  value = $arg3;
  index = $arg4;
  length = $arg5;
}
probe qemu.kvm.usb_hub_get_port_status = process("/usr/libexec/qemu-kvm").mark("usb_hub_get_port_status")
{
  addr = $arg1;
  nr = $arg2;
  status = $arg3;
  changed = $arg4;
}
probe qemu.kvm.usb_hub_set_port_feature = process("/usr/libexec/qemu-kvm").mark("usb_hub_set_port_feature")
{
  addr = $arg1;
  nr = $arg2;
  f = $arg3;
}
probe qemu.kvm.usb_hub_clear_port_feature = process("/usr/libexec/qemu-kvm").mark("usb_hub_clear_port_feature")
{
  addr = $arg1;
  nr = $arg2;
  f = $arg3;
}
probe qemu.kvm.usb_hub_attach = process("/usr/libexec/qemu-kvm").mark("usb_hub_attach")
{
  addr = $arg1;
  nr = $arg2;
}
probe qemu.kvm.usb_hub_detach = process("/usr/libexec/qemu-kvm").mark("usb_hub_detach")
{
  addr = $arg1;
  nr = $arg2;
}
probe qemu.kvm.usb_uas_reset = process("/usr/libexec/qemu-kvm").mark("usb_uas_reset")
{
  addr = $arg1;
}
probe qemu.kvm.usb_uas_command = process("/usr/libexec/qemu-kvm").mark("usb_uas_command")
{
  addr = $arg1;
  tag = $arg2;
  lun = $arg3;
  lun64_1 = $arg4;
  lun64_2 = $arg5;
}
probe qemu.kvm.usb_uas_response = process("/usr/libexec/qemu-kvm").mark("usb_uas_response")
{
  addr = $arg1;
  tag = $arg2;
  code = $arg3;
}
probe qemu.kvm.usb_uas_sense = process("/usr/libexec/qemu-kvm").mark("usb_uas_sense")
{
  addr = $arg1;
  tag = $arg2;
  status = $arg3;
}
probe qemu.kvm.usb_uas_read_ready = process("/usr/libexec/qemu-kvm").mark("usb_uas_read_ready")
{
  addr = $arg1;
  tag = $arg2;
}
probe qemu.kvm.usb_uas_write_ready = process("/usr/libexec/qemu-kvm").mark("usb_uas_write_ready")
{
  addr = $arg1;
  tag = $arg2;
}
probe qemu.kvm.usb_uas_xfer_data = process("/usr/libexec/qemu-kvm").mark("usb_uas_xfer_data")
{
  addr = $arg1;
  tag = $arg2;
  copy = $arg3;
  uoff = $arg4;
  usize = $arg5;
  soff = $arg6;
  ssize = $arg7;
}
probe qemu.kvm.usb_uas_scsi_data = process("/usr/libexec/qemu-kvm").mark("usb_uas_scsi_data")
{
  addr = $arg1;
  tag = $arg2;
  bytes = $arg3;
}
probe qemu.kvm.usb_uas_scsi_complete = process("/usr/libexec/qemu-kvm").mark("usb_uas_scsi_complete")
{
  addr = $arg1;
  tag = $arg2;
  status = $arg3;
  resid = $arg4;
}
probe qemu.kvm.usb_uas_tmf_abort_task = process("/usr/libexec/qemu-kvm").mark("usb_uas_tmf_abort_task")
{
  addr = $arg1;
  tag = $arg2;
  task_tag = $arg3;
}
probe qemu.kvm.usb_uas_tmf_logical_unit_reset = process("/usr/libexec/qemu-kvm").mark("usb_uas_tmf_logical_unit_reset")
{
  addr = $arg1;
  tag = $arg2;
  lun = $arg3;
}
probe qemu.kvm.usb_uas_tmf_unsupported = process("/usr/libexec/qemu-kvm").mark("usb_uas_tmf_unsupported")
{
  addr = $arg1;
  tag = $arg2;
  function_ = $arg3;
}
probe qemu.kvm.usb_host_open_started = process("/usr/libexec/qemu-kvm").mark("usb_host_open_started")
{
  bus = $arg1;
  addr = $arg2;
}
probe qemu.kvm.usb_host_open_success = process("/usr/libexec/qemu-kvm").mark("usb_host_open_success")
{
  bus = $arg1;
  addr = $arg2;
}
probe qemu.kvm.usb_host_open_failure = process("/usr/libexec/qemu-kvm").mark("usb_host_open_failure")
{
  bus = $arg1;
  addr = $arg2;
}
probe qemu.kvm.usb_host_close = process("/usr/libexec/qemu-kvm").mark("usb_host_close")
{
  bus = $arg1;
  addr = $arg2;
}
probe qemu.kvm.usb_host_attach_kernel = process("/usr/libexec/qemu-kvm").mark("usb_host_attach_kernel")
{
  bus = $arg1;
  addr = $arg2;
  interface = $arg3;
}
probe qemu.kvm.usb_host_detach_kernel = process("/usr/libexec/qemu-kvm").mark("usb_host_detach_kernel")
{
  bus = $arg1;
  addr = $arg2;
  interface = $arg3;
}
probe qemu.kvm.usb_host_set_address = process("/usr/libexec/qemu-kvm").mark("usb_host_set_address")
{
  bus = $arg1;
  addr = $arg2;
  config = $arg3;
}
probe qemu.kvm.usb_host_set_config = process("/usr/libexec/qemu-kvm").mark("usb_host_set_config")
{
  bus = $arg1;
  addr = $arg2;
  config = $arg3;
}
probe qemu.kvm.usb_host_set_interface = process("/usr/libexec/qemu-kvm").mark("usb_host_set_interface")
{
  bus = $arg1;
  addr = $arg2;
  interface = $arg3;
  alt = $arg4;
}
probe qemu.kvm.usb_host_claim_interface = process("/usr/libexec/qemu-kvm").mark("usb_host_claim_interface")
{
  bus = $arg1;
  addr = $arg2;
  config = $arg3;
  interface = $arg4;
}
probe qemu.kvm.usb_host_release_interface = process("/usr/libexec/qemu-kvm").mark("usb_host_release_interface")
{
  bus = $arg1;
  addr = $arg2;
  interface = $arg3;
}
probe qemu.kvm.usb_host_req_control = process("/usr/libexec/qemu-kvm").mark("usb_host_req_control")
{
  bus = $arg1;
  addr = $arg2;
  p = $arg3;
  req = $arg4;
  value = $arg5;
  index = $arg6;
}
probe qemu.kvm.usb_host_req_data = process("/usr/libexec/qemu-kvm").mark("usb_host_req_data")
{
  bus = $arg1;
  addr = $arg2;
  p = $arg3;
  in_ = $arg4;
  ep = $arg5;
  size = $arg6;
}
probe qemu.kvm.usb_host_req_complete = process("/usr/libexec/qemu-kvm").mark("usb_host_req_complete")
{
  bus = $arg1;
  addr = $arg2;
  p = $arg3;
  status = $arg4;
  length = $arg5;
}
probe qemu.kvm.usb_host_req_emulated = process("/usr/libexec/qemu-kvm").mark("usb_host_req_emulated")
{
  bus = $arg1;
  addr = $arg2;
  p = $arg3;
  status = $arg4;
}
probe qemu.kvm.usb_host_req_canceled = process("/usr/libexec/qemu-kvm").mark("usb_host_req_canceled")
{
  bus = $arg1;
  addr = $arg2;
  p = $arg3;
}
probe qemu.kvm.usb_host_iso_start = process("/usr/libexec/qemu-kvm").mark("usb_host_iso_start")
{
  bus = $arg1;
  addr = $arg2;
  ep = $arg3;
}
probe qemu.kvm.usb_host_iso_stop = process("/usr/libexec/qemu-kvm").mark("usb_host_iso_stop")
{
  bus = $arg1;
  addr = $arg2;
  ep = $arg3;
}
probe qemu.kvm.usb_host_iso_out_of_bufs = process("/usr/libexec/qemu-kvm").mark("usb_host_iso_out_of_bufs")
{
  bus = $arg1;
  addr = $arg2;
  ep = $arg3;
}
probe qemu.kvm.usb_host_reset = process("/usr/libexec/qemu-kvm").mark("usb_host_reset")
{
  bus = $arg1;
  addr = $arg2;
}
probe qemu.kvm.usb_host_auto_scan_enabled = process("/usr/libexec/qemu-kvm").mark("usb_host_auto_scan_enabled")
{
}
probe qemu.kvm.usb_host_auto_scan_disabled = process("/usr/libexec/qemu-kvm").mark("usb_host_auto_scan_disabled")
{
}
probe qemu.kvm.usb_host_parse_config = process("/usr/libexec/qemu-kvm").mark("usb_host_parse_config")
{
  bus = $arg1;
  addr = $arg2;
  value = $arg3;
  active = $arg4;
}
probe qemu.kvm.usb_host_parse_interface = process("/usr/libexec/qemu-kvm").mark("usb_host_parse_interface")
{
  bus = $arg1;
  addr = $arg2;
  num = $arg3;
  alt = $arg4;
  active = $arg5;
}
probe qemu.kvm.usb_host_parse_endpoint = process("/usr/libexec/qemu-kvm").mark("usb_host_parse_endpoint")
{
  bus = $arg1;
  addr = $arg2;
  ep = $arg3;
  dir = $arg4;
  type = $arg5;
  active = $arg6;
}
probe qemu.kvm.usb_host_parse_error = process("/usr/libexec/qemu-kvm").mark("usb_host_parse_error")
{
  bus = $arg1;
  addr = $arg2;
  errmsg = $arg3;
}
probe qemu.kvm.scsi_req_alloc = process("/usr/libexec/qemu-kvm").mark("scsi_req_alloc")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
}
probe qemu.kvm.scsi_req_cancel = process("/usr/libexec/qemu-kvm").mark("scsi_req_cancel")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
}
probe qemu.kvm.scsi_req_data = process("/usr/libexec/qemu-kvm").mark("scsi_req_data")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
  len = $arg4;
}
probe qemu.kvm.scsi_req_data_canceled = process("/usr/libexec/qemu-kvm").mark("scsi_req_data_canceled")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
  len = $arg4;
}
probe qemu.kvm.scsi_req_dequeue = process("/usr/libexec/qemu-kvm").mark("scsi_req_dequeue")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
}
probe qemu.kvm.scsi_req_continue = process("/usr/libexec/qemu-kvm").mark("scsi_req_continue")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
}
probe qemu.kvm.scsi_req_continue_canceled = process("/usr/libexec/qemu-kvm").mark("scsi_req_continue_canceled")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
}
probe qemu.kvm.scsi_req_parsed = process("/usr/libexec/qemu-kvm").mark("scsi_req_parsed")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
  cmd = $arg4;
  mode = $arg5;
  xfer = $arg6;
}
probe qemu.kvm.scsi_req_parsed_lba = process("/usr/libexec/qemu-kvm").mark("scsi_req_parsed_lba")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
  cmd = $arg4;
  lba = $arg5;
}
probe qemu.kvm.scsi_req_parse_bad = process("/usr/libexec/qemu-kvm").mark("scsi_req_parse_bad")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
  cmd = $arg4;
}
probe qemu.kvm.scsi_req_build_sense = process("/usr/libexec/qemu-kvm").mark("scsi_req_build_sense")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
  key = $arg4;
  asc = $arg5;
  ascq = $arg6;
}
probe qemu.kvm.scsi_device_set_ua = process("/usr/libexec/qemu-kvm").mark("scsi_device_set_ua")
{
  target = $arg1;
  lun = $arg2;
  key = $arg3;
  asc = $arg4;
  ascq = $arg5;
}
probe qemu.kvm.scsi_report_luns = process("/usr/libexec/qemu-kvm").mark("scsi_report_luns")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
}
probe qemu.kvm.scsi_inquiry = process("/usr/libexec/qemu-kvm").mark("scsi_inquiry")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
  cdb1 = $arg4;
  cdb2 = $arg5;
}
probe qemu.kvm.scsi_test_unit_ready = process("/usr/libexec/qemu-kvm").mark("scsi_test_unit_ready")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
}
probe qemu.kvm.scsi_request_sense = process("/usr/libexec/qemu-kvm").mark("scsi_request_sense")
{
  target = $arg1;
  lun = $arg2;
  tag = $arg3;
}
probe qemu.kvm.vm_state_notify = process("/usr/libexec/qemu-kvm").mark("vm_state_notify")
{
  running = $arg1;
  reason = $arg2;
}
probe qemu.kvm.load_file = process("/usr/libexec/qemu-kvm").mark("load_file")
{
  name = $arg1;
  path = $arg2;
}
probe qemu.kvm.runstate_set = process("/usr/libexec/qemu-kvm").mark("runstate_set")
{
  new_state = $arg1;
}
probe qemu.kvm.g_malloc = process("/usr/libexec/qemu-kvm").mark("g_malloc")
{
  size = $arg1;
  ptr = $arg2;
}
probe qemu.kvm.g_realloc = process("/usr/libexec/qemu-kvm").mark("g_realloc")
{
  ptr = $arg1;
  size = $arg2;
  newptr = $arg3;
}
probe qemu.kvm.g_free = process("/usr/libexec/qemu-kvm").mark("g_free")
{
  ptr = $arg1;
}
probe qemu.kvm.qemu_system_shutdown_request = process("/usr/libexec/qemu-kvm").mark("qemu_system_shutdown_request")
{
}
probe qemu.kvm.qemu_system_powerdown_request = process("/usr/libexec/qemu-kvm").mark("qemu_system_powerdown_request")
{
}
probe qemu.kvm.qcow2_writev_start_req = process("/usr/libexec/qemu-kvm").mark("qcow2_writev_start_req")
{
  co = $arg1;
  sector = $arg2;
  nb_sectors = $arg3;
}
probe qemu.kvm.qcow2_writev_done_req = process("/usr/libexec/qemu-kvm").mark("qcow2_writev_done_req")
{
  co = $arg1;
  ret = $arg2;
}
probe qemu.kvm.qcow2_writev_start_part = process("/usr/libexec/qemu-kvm").mark("qcow2_writev_start_part")
{
  co = $arg1;
}
probe qemu.kvm.qcow2_writev_done_part = process("/usr/libexec/qemu-kvm").mark("qcow2_writev_done_part")
{
  co = $arg1;
  cur_nr_sectors = $arg2;
}
probe qemu.kvm.qcow2_writev_data = process("/usr/libexec/qemu-kvm").mark("qcow2_writev_data")
{
  co = $arg1;
  offset = $arg2;
}
probe qemu.kvm.qcow2_alloc_clusters_offset = process("/usr/libexec/qemu-kvm").mark("qcow2_alloc_clusters_offset")
{
  co = $arg1;
  offset = $arg2;
  num = $arg3;
}
probe qemu.kvm.qcow2_handle_copied = process("/usr/libexec/qemu-kvm").mark("qcow2_handle_copied")
{
  co = $arg1;
  guest_offset = $arg2;
  host_offset = $arg3;
  bytes = $arg4;
}
probe qemu.kvm.qcow2_handle_alloc = process("/usr/libexec/qemu-kvm").mark("qcow2_handle_alloc")
{
  co = $arg1;
  guest_offset = $arg2;
  host_offset = $arg3;
  bytes = $arg4;
}
probe qemu.kvm.qcow2_do_alloc_clusters_offset = process("/usr/libexec/qemu-kvm").mark("qcow2_do_alloc_clusters_offset")
{
  co = $arg1;
  guest_offset = $arg2;
  host_offset = $arg3;
  nb_clusters = $arg4;
}
probe qemu.kvm.qcow2_cluster_alloc_phys = process("/usr/libexec/qemu-kvm").mark("qcow2_cluster_alloc_phys")
{
  co = $arg1;
}
probe qemu.kvm.qcow2_cluster_link_l2 = process("/usr/libexec/qemu-kvm").mark("qcow2_cluster_link_l2")
{
  co = $arg1;
  nb_clusters = $arg2;
}
probe qemu.kvm.qcow2_l2_allocate = process("/usr/libexec/qemu-kvm").mark("qcow2_l2_allocate")
{
  bs = $arg1;
  l1_index = $arg2;
}
probe qemu.kvm.qcow2_l2_allocate_get_empty = process("/usr/libexec/qemu-kvm").mark("qcow2_l2_allocate_get_empty")
{
  bs = $arg1;
  l1_index = $arg2;
}
probe qemu.kvm.qcow2_l2_allocate_write_l2 = process("/usr/libexec/qemu-kvm").mark("qcow2_l2_allocate_write_l2")
{
  bs = $arg1;
  l1_index = $arg2;
}
probe qemu.kvm.qcow2_l2_allocate_write_l1 = process("/usr/libexec/qemu-kvm").mark("qcow2_l2_allocate_write_l1")
{
  bs = $arg1;
  l1_index = $arg2;
}
probe qemu.kvm.qcow2_l2_allocate_done = process("/usr/libexec/qemu-kvm").mark("qcow2_l2_allocate_done")
{
  bs = $arg1;
  l1_index = $arg2;
  ret = $arg3;
}
probe qemu.kvm.qcow2_cache_get = process("/usr/libexec/qemu-kvm").mark("qcow2_cache_get")
{
  co = $arg1;
  c = $arg2;
  offset = $arg3;
  read_from_disk = $arg4;
}
probe qemu.kvm.qcow2_cache_get_replace_entry = process("/usr/libexec/qemu-kvm").mark("qcow2_cache_get_replace_entry")
{
  co = $arg1;
  c = $arg2;
  i = $arg3;
}
probe qemu.kvm.qcow2_cache_get_read = process("/usr/libexec/qemu-kvm").mark("qcow2_cache_get_read")
{
  co = $arg1;
  c = $arg2;
  i = $arg3;
}
probe qemu.kvm.qcow2_cache_get_done = process("/usr/libexec/qemu-kvm").mark("qcow2_cache_get_done")
{
  co = $arg1;
  c = $arg2;
  i = $arg3;
}
probe qemu.kvm.qcow2_cache_flush = process("/usr/libexec/qemu-kvm").mark("qcow2_cache_flush")
{
  co = $arg1;
  c = $arg2;
}
probe qemu.kvm.qcow2_cache_entry_flush = process("/usr/libexec/qemu-kvm").mark("qcow2_cache_entry_flush")
{
  co = $arg1;
  c = $arg2;
  i = $arg3;
}
probe qemu.kvm.qed_alloc_l2_cache_entry = process("/usr/libexec/qemu-kvm").mark("qed_alloc_l2_cache_entry")
{
  l2_cache = $arg1;
  entry = $arg2;
}
probe qemu.kvm.qed_unref_l2_cache_entry = process("/usr/libexec/qemu-kvm").mark("qed_unref_l2_cache_entry")
{
  entry = $arg1;
  ref = $arg2;
}
probe qemu.kvm.qed_find_l2_cache_entry = process("/usr/libexec/qemu-kvm").mark("qed_find_l2_cache_entry")
{
  l2_cache = $arg1;
  entry = $arg2;
  offset = $arg3;
  ref = $arg4;
}
probe qemu.kvm.qed_read_table = process("/usr/libexec/qemu-kvm").mark("qed_read_table")
{
  s = $arg1;
  offset = $arg2;
  table = $arg3;
}
probe qemu.kvm.qed_read_table_cb = process("/usr/libexec/qemu-kvm").mark("qed_read_table_cb")
{
  s = $arg1;
  table = $arg2;
  ret = $arg3;
}
probe qemu.kvm.qed_write_table = process("/usr/libexec/qemu-kvm").mark("qed_write_table")
{
  s = $arg1;
  offset = $arg2;
  table = $arg3;
  index = $arg4;
  n = $arg5;
}
probe qemu.kvm.qed_write_table_cb = process("/usr/libexec/qemu-kvm").mark("qed_write_table_cb")
{
  s = $arg1;
  table = $arg2;
  flush = $arg3;
  ret = $arg4;
}
probe qemu.kvm.qed_need_check_timer_cb = process("/usr/libexec/qemu-kvm").mark("qed_need_check_timer_cb")
{
  s = $arg1;
}
probe qemu.kvm.qed_start_need_check_timer = process("/usr/libexec/qemu-kvm").mark("qed_start_need_check_timer")
{
  s = $arg1;
}
probe qemu.kvm.qed_cancel_need_check_timer = process("/usr/libexec/qemu-kvm").mark("qed_cancel_need_check_timer")
{
  s = $arg1;
}
probe qemu.kvm.qed_aio_complete = process("/usr/libexec/qemu-kvm").mark("qed_aio_complete")
{
  s = $arg1;
  acb = $arg2;
  ret = $arg3;
}
probe qemu.kvm.qed_aio_setup = process("/usr/libexec/qemu-kvm").mark("qed_aio_setup")
{
  s = $arg1;
  acb = $arg2;
  sector_num = $arg3;
  nb_sectors = $arg4;
  opaque = $arg5;
  flags = $arg6;
}
probe qemu.kvm.qed_aio_next_io = process("/usr/libexec/qemu-kvm").mark("qed_aio_next_io")
{
  s = $arg1;
  acb = $arg2;
  ret = $arg3;
  cur_pos = $arg4;
}
probe qemu.kvm.qed_aio_read_data = process("/usr/libexec/qemu-kvm").mark("qed_aio_read_data")
{
  s = $arg1;
  acb = $arg2;
  ret = $arg3;
  offset = $arg4;
  len = $arg5;
}
probe qemu.kvm.qed_aio_write_data = process("/usr/libexec/qemu-kvm").mark("qed_aio_write_data")
{
  s = $arg1;
  acb = $arg2;
  ret = $arg3;
  offset = $arg4;
  len = $arg5;
}
probe qemu.kvm.qed_aio_write_prefill = process("/usr/libexec/qemu-kvm").mark("qed_aio_write_prefill")
{
  s = $arg1;
  acb = $arg2;
  start = $arg3;
  len = $arg4;
  offset = $arg5;
}
probe qemu.kvm.qed_aio_write_postfill = process("/usr/libexec/qemu-kvm").mark("qed_aio_write_postfill")
{
  s = $arg1;
  acb = $arg2;
  start = $arg3;
  len = $arg4;
  offset = $arg5;
}
probe qemu.kvm.qed_aio_write_main = process("/usr/libexec/qemu-kvm").mark("qed_aio_write_main")
{
  s = $arg1;
  acb = $arg2;
  ret = $arg3;
  offset = $arg4;
  len = $arg5;
}
probe qemu.kvm.g364fb_read = process("/usr/libexec/qemu-kvm").mark("g364fb_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.g364fb_write = process("/usr/libexec/qemu-kvm").mark("g364fb_write")
{
  addr = $arg1;
  new = $arg2;
}
probe qemu.kvm.grlib_gptimer_enable = process("/usr/libexec/qemu-kvm").mark("grlib_gptimer_enable")
{
  id = $arg1;
  count = $arg2;
}
probe qemu.kvm.grlib_gptimer_disabled = process("/usr/libexec/qemu-kvm").mark("grlib_gptimer_disabled")
{
  id = $arg1;
  config = $arg2;
}
probe qemu.kvm.grlib_gptimer_restart = process("/usr/libexec/qemu-kvm").mark("grlib_gptimer_restart")
{
  id = $arg1;
  reload = $arg2;
}
probe qemu.kvm.grlib_gptimer_set_scaler = process("/usr/libexec/qemu-kvm").mark("grlib_gptimer_set_scaler")
{
  scaler = $arg1;
  freq = $arg2;
}
probe qemu.kvm.grlib_gptimer_hit = process("/usr/libexec/qemu-kvm").mark("grlib_gptimer_hit")
{
  id = $arg1;
}
probe qemu.kvm.grlib_gptimer_readl = process("/usr/libexec/qemu-kvm").mark("grlib_gptimer_readl")
{
  id = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.kvm.grlib_gptimer_writel = process("/usr/libexec/qemu-kvm").mark("grlib_gptimer_writel")
{
  id = $arg1;
  addr = $arg2;
  val = $arg3;
}
probe qemu.kvm.grlib_irqmp_check_irqs = process("/usr/libexec/qemu-kvm").mark("grlib_irqmp_check_irqs")
{
  pend = $arg1;
  force = $arg2;
  mask = $arg3;
  lvl1 = $arg4;
  lvl2 = $arg5;
}
probe qemu.kvm.grlib_irqmp_ack = process("/usr/libexec/qemu-kvm").mark("grlib_irqmp_ack")
{
  intno = $arg1;
}
probe qemu.kvm.grlib_irqmp_set_irq = process("/usr/libexec/qemu-kvm").mark("grlib_irqmp_set_irq")
{
  irq = $arg1;
}
probe qemu.kvm.grlib_irqmp_readl_unknown = process("/usr/libexec/qemu-kvm").mark("grlib_irqmp_readl_unknown")
{
  addr = $arg1;
}
probe qemu.kvm.grlib_irqmp_writel_unknown = process("/usr/libexec/qemu-kvm").mark("grlib_irqmp_writel_unknown")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.grlib_apbuart_event = process("/usr/libexec/qemu-kvm").mark("grlib_apbuart_event")
{
  event = $arg1;
}
probe qemu.kvm.grlib_apbuart_writel_unknown = process("/usr/libexec/qemu-kvm").mark("grlib_apbuart_writel_unknown")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.grlib_apbuart_readl_unknown = process("/usr/libexec/qemu-kvm").mark("grlib_apbuart_readl_unknown")
{
  addr = $arg1;
}
probe qemu.kvm.leon3_set_irq = process("/usr/libexec/qemu-kvm").mark("leon3_set_irq")
{
  intno = $arg1;
}
probe qemu.kvm.leon3_reset_irq = process("/usr/libexec/qemu-kvm").mark("leon3_reset_irq")
{
  intno = $arg1;
}
probe qemu.kvm.spice_vmc_write = process("/usr/libexec/qemu-kvm").mark("spice_vmc_write")
{
  out = $arg1;
  len = $arg2;
}
probe qemu.kvm.spice_vmc_read = process("/usr/libexec/qemu-kvm").mark("spice_vmc_read")
{
  bytes = $arg1;
  len = $arg2;
}
probe qemu.kvm.spice_vmc_register_interface = process("/usr/libexec/qemu-kvm").mark("spice_vmc_register_interface")
{
  scd = $arg1;
}
probe qemu.kvm.spice_vmc_unregister_interface = process("/usr/libexec/qemu-kvm").mark("spice_vmc_unregister_interface")
{
  scd = $arg1;
}
probe qemu.kvm.spice_vmc_event = process("/usr/libexec/qemu-kvm").mark("spice_vmc_event")
{
  event = $arg1;
}
probe qemu.kvm.lm32_pic_raise_irq = process("/usr/libexec/qemu-kvm").mark("lm32_pic_raise_irq")
{
}
probe qemu.kvm.lm32_pic_lower_irq = process("/usr/libexec/qemu-kvm").mark("lm32_pic_lower_irq")
{
}
probe qemu.kvm.lm32_pic_interrupt = process("/usr/libexec/qemu-kvm").mark("lm32_pic_interrupt")
{
  irq = $arg1;
  level = $arg2;
}
probe qemu.kvm.lm32_pic_set_im = process("/usr/libexec/qemu-kvm").mark("lm32_pic_set_im")
{
  im = $arg1;
}
probe qemu.kvm.lm32_pic_set_ip = process("/usr/libexec/qemu-kvm").mark("lm32_pic_set_ip")
{
  ip = $arg1;
}
probe qemu.kvm.lm32_pic_get_im = process("/usr/libexec/qemu-kvm").mark("lm32_pic_get_im")
{
  im = $arg1;
}
probe qemu.kvm.lm32_pic_get_ip = process("/usr/libexec/qemu-kvm").mark("lm32_pic_get_ip")
{
  ip = $arg1;
}
probe qemu.kvm.lm32_juart_get_jtx = process("/usr/libexec/qemu-kvm").mark("lm32_juart_get_jtx")
{
  value = $arg1;
}
probe qemu.kvm.lm32_juart_set_jtx = process("/usr/libexec/qemu-kvm").mark("lm32_juart_set_jtx")
{
  value = $arg1;
}
probe qemu.kvm.lm32_juart_get_jrx = process("/usr/libexec/qemu-kvm").mark("lm32_juart_get_jrx")
{
  value = $arg1;
}
probe qemu.kvm.lm32_juart_set_jrx = process("/usr/libexec/qemu-kvm").mark("lm32_juart_set_jrx")
{
  value = $arg1;
}
probe qemu.kvm.lm32_timer_memory_write = process("/usr/libexec/qemu-kvm").mark("lm32_timer_memory_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.lm32_timer_memory_read = process("/usr/libexec/qemu-kvm").mark("lm32_timer_memory_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.lm32_timer_hit = process("/usr/libexec/qemu-kvm").mark("lm32_timer_hit")
{
}
probe qemu.kvm.lm32_timer_irq_state = process("/usr/libexec/qemu-kvm").mark("lm32_timer_irq_state")
{
  level = $arg1;
}
probe qemu.kvm.lm32_uart_memory_write = process("/usr/libexec/qemu-kvm").mark("lm32_uart_memory_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.lm32_uart_memory_read = process("/usr/libexec/qemu-kvm").mark("lm32_uart_memory_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.lm32_uart_irq_state = process("/usr/libexec/qemu-kvm").mark("lm32_uart_irq_state")
{
  level = $arg1;
}
probe qemu.kvm.lm32_sys_memory_write = process("/usr/libexec/qemu-kvm").mark("lm32_sys_memory_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.megasas_init_firmware = process("/usr/libexec/qemu-kvm").mark("megasas_init_firmware")
{
  pa = $arg1;
}
probe qemu.kvm.megasas_init_queue = process("/usr/libexec/qemu-kvm").mark("megasas_init_queue")
{
  queue_pa = $arg1;
  queue_len = $arg2;
  head = $arg3;
  tail = $arg4;
  flags = $arg5;
}
probe qemu.kvm.megasas_initq_map_failed = process("/usr/libexec/qemu-kvm").mark("megasas_initq_map_failed")
{
  frame = $arg1;
}
probe qemu.kvm.megasas_initq_mismatch = process("/usr/libexec/qemu-kvm").mark("megasas_initq_mismatch")
{
  queue_len = $arg1;
  fw_cmds = $arg2;
}
probe qemu.kvm.megasas_qf_found = process("/usr/libexec/qemu-kvm").mark("megasas_qf_found")
{
  index = $arg1;
  pa = $arg2;
}
probe qemu.kvm.megasas_qf_new = process("/usr/libexec/qemu-kvm").mark("megasas_qf_new")
{
  index = $arg1;
  cmd = $arg2;
}
probe qemu.kvm.megasas_qf_failed = process("/usr/libexec/qemu-kvm").mark("megasas_qf_failed")
{
  pa = $arg1;
}
probe qemu.kvm.megasas_qf_enqueue = process("/usr/libexec/qemu-kvm").mark("megasas_qf_enqueue")
{
  index = $arg1;
  count = $arg2;
  context = $arg3;
  tail = $arg4;
  busy = $arg5;
}
probe qemu.kvm.megasas_qf_update = process("/usr/libexec/qemu-kvm").mark("megasas_qf_update")
{
  head = $arg1;
  busy = $arg2;
}
probe qemu.kvm.megasas_qf_map_failed = process("/usr/libexec/qemu-kvm").mark("megasas_qf_map_failed")
{
  cmd = $arg1;
  frame = $arg2;
}
probe qemu.kvm.megasas_qf_complete_noirq = process("/usr/libexec/qemu-kvm").mark("megasas_qf_complete_noirq")
{
  context = $arg1;
}
probe qemu.kvm.megasas_qf_complete = process("/usr/libexec/qemu-kvm").mark("megasas_qf_complete")
{
  context = $arg1;
  tail = $arg2;
  offset = $arg3;
  busy = $arg4;
  doorbell = $arg5;
}
probe qemu.kvm.megasas_frame_busy = process("/usr/libexec/qemu-kvm").mark("megasas_frame_busy")
{
  addr = $arg1;
}
probe qemu.kvm.megasas_unhandled_frame_cmd = process("/usr/libexec/qemu-kvm").mark("megasas_unhandled_frame_cmd")
{
  cmd = $arg1;
  frame_cmd = $arg2;
}
probe qemu.kvm.megasas_handle_scsi = process("/usr/libexec/qemu-kvm").mark("megasas_handle_scsi")
{
  frame = $arg1;
  bus = $arg2;
  dev = $arg3;
  lun = $arg4;
  sdev = $arg5;
  size = $arg6;
}
probe qemu.kvm.megasas_scsi_target_not_present = process("/usr/libexec/qemu-kvm").mark("megasas_scsi_target_not_present")
{
  frame = $arg1;
  bus = $arg2;
  dev = $arg3;
  lun = $arg4;
}
probe qemu.kvm.megasas_scsi_invalid_cdb_len = process("/usr/libexec/qemu-kvm").mark("megasas_scsi_invalid_cdb_len")
{
  frame = $arg1;
  bus = $arg2;
  dev = $arg3;
  lun = $arg4;
  len = $arg5;
}
probe qemu.kvm.megasas_iov_read_overflow = process("/usr/libexec/qemu-kvm").mark("megasas_iov_read_overflow")
{
  cmd = $arg1;
  bytes = $arg2;
  len = $arg3;
}
probe qemu.kvm.megasas_iov_write_overflow = process("/usr/libexec/qemu-kvm").mark("megasas_iov_write_overflow")
{
  cmd = $arg1;
  bytes = $arg2;
  len = $arg3;
}
probe qemu.kvm.megasas_iov_read_underflow = process("/usr/libexec/qemu-kvm").mark("megasas_iov_read_underflow")
{
  cmd = $arg1;
  bytes = $arg2;
  len = $arg3;
}
probe qemu.kvm.megasas_iov_write_underflow = process("/usr/libexec/qemu-kvm").mark("megasas_iov_write_underflow")
{
  cmd = $arg1;
  bytes = $arg2;
  len = $arg3;
}
probe qemu.kvm.megasas_scsi_req_alloc_failed = process("/usr/libexec/qemu-kvm").mark("megasas_scsi_req_alloc_failed")
{
  frame = $arg1;
  dev = $arg2;
  lun = $arg3;
}
probe qemu.kvm.megasas_scsi_read_start = process("/usr/libexec/qemu-kvm").mark("megasas_scsi_read_start")
{
  cmd = $arg1;
  len = $arg2;
}
probe qemu.kvm.megasas_scsi_write_start = process("/usr/libexec/qemu-kvm").mark("megasas_scsi_write_start")
{
  cmd = $arg1;
  len = $arg2;
}
probe qemu.kvm.megasas_scsi_nodata = process("/usr/libexec/qemu-kvm").mark("megasas_scsi_nodata")
{
  cmd = $arg1;
}
probe qemu.kvm.megasas_scsi_complete = process("/usr/libexec/qemu-kvm").mark("megasas_scsi_complete")
{
  cmd = $arg1;
  status = $arg2;
  len = $arg3;
  xfer = $arg4;
}
probe qemu.kvm.megasas_command_complete = process("/usr/libexec/qemu-kvm").mark("megasas_command_complete")
{
  cmd = $arg1;
  status = $arg2;
  resid = $arg3;
}
probe qemu.kvm.megasas_handle_io = process("/usr/libexec/qemu-kvm").mark("megasas_handle_io")
{
  cmd = $arg1;
  frame = $arg2;
  dev = $arg3;
  lun = $arg4;
  lba = $arg5;
  count = $arg6;
}
probe qemu.kvm.megasas_io_target_not_present = process("/usr/libexec/qemu-kvm").mark("megasas_io_target_not_present")
{
  cmd = $arg1;
  frame = $arg2;
  dev = $arg3;
  lun = $arg4;
}
probe qemu.kvm.megasas_io_read_start = process("/usr/libexec/qemu-kvm").mark("megasas_io_read_start")
{
  cmd = $arg1;
  lba = $arg2;
  count = $arg3;
  len = $arg4;
}
probe qemu.kvm.megasas_io_write_start = process("/usr/libexec/qemu-kvm").mark("megasas_io_write_start")
{
  cmd = $arg1;
  lba = $arg2;
  count = $arg3;
  len = $arg4;
}
probe qemu.kvm.megasas_io_complete = process("/usr/libexec/qemu-kvm").mark("megasas_io_complete")
{
  cmd = $arg1;
  len = $arg2;
}
probe qemu.kvm.megasas_io_read = process("/usr/libexec/qemu-kvm").mark("megasas_io_read")
{
  cmd = $arg1;
  bytes = $arg2;
  len = $arg3;
  offset = $arg4;
}
probe qemu.kvm.megasas_io_write = process("/usr/libexec/qemu-kvm").mark("megasas_io_write")
{
  cmd = $arg1;
  bytes = $arg2;
  len = $arg3;
  offset = $arg4;
}
probe qemu.kvm.megasas_iovec_sgl_overflow = process("/usr/libexec/qemu-kvm").mark("megasas_iovec_sgl_overflow")
{
  cmd = $arg1;
  index = $arg2;
  limit_ = $arg3;
}
probe qemu.kvm.megasas_iovec_sgl_underflow = process("/usr/libexec/qemu-kvm").mark("megasas_iovec_sgl_underflow")
{
  cmd = $arg1;
  index = $arg2;
}
probe qemu.kvm.megasas_iovec_sgl_invalid = process("/usr/libexec/qemu-kvm").mark("megasas_iovec_sgl_invalid")
{
  cmd = $arg1;
  index = $arg2;
  pa = $arg3;
  len = $arg4;
}
probe qemu.kvm.megasas_iovec_overflow = process("/usr/libexec/qemu-kvm").mark("megasas_iovec_overflow")
{
  cmd = $arg1;
  len = $arg2;
  limit_ = $arg3;
}
probe qemu.kvm.megasas_iovec_underflow = process("/usr/libexec/qemu-kvm").mark("megasas_iovec_underflow")
{
  cmd = $arg1;
  len = $arg2;
  limit_ = $arg3;
}
probe qemu.kvm.megasas_handle_dcmd = process("/usr/libexec/qemu-kvm").mark("megasas_handle_dcmd")
{
  cmd = $arg1;
  opcode = $arg2;
}
probe qemu.kvm.megasas_finish_dcmd = process("/usr/libexec/qemu-kvm").mark("megasas_finish_dcmd")
{
  cmd = $arg1;
  size = $arg2;
}
probe qemu.kvm.megasas_dcmd_req_alloc_failed = process("/usr/libexec/qemu-kvm").mark("megasas_dcmd_req_alloc_failed")
{
  cmd = $arg1;
  desc = $arg2;
}
probe qemu.kvm.megasas_dcmd_internal_submit = process("/usr/libexec/qemu-kvm").mark("megasas_dcmd_internal_submit")
{
  cmd = $arg1;
  desc = $arg2;
  dev = $arg3;
}
probe qemu.kvm.megasas_dcmd_internal_finish = process("/usr/libexec/qemu-kvm").mark("megasas_dcmd_internal_finish")
{
  cmd = $arg1;
  opcode = $arg2;
  lun = $arg3;
}
probe qemu.kvm.megasas_dcmd_internal_invalid = process("/usr/libexec/qemu-kvm").mark("megasas_dcmd_internal_invalid")
{
  cmd = $arg1;
  opcode = $arg2;
}
probe qemu.kvm.megasas_dcmd_unhandled = process("/usr/libexec/qemu-kvm").mark("megasas_dcmd_unhandled")
{
  cmd = $arg1;
  opcode = $arg2;
  len = $arg3;
}
probe qemu.kvm.megasas_dcmd_zero_sge = process("/usr/libexec/qemu-kvm").mark("megasas_dcmd_zero_sge")
{
  cmd = $arg1;
}
probe qemu.kvm.megasas_dcmd_invalid_sge = process("/usr/libexec/qemu-kvm").mark("megasas_dcmd_invalid_sge")
{
  cmd = $arg1;
  count = $arg2;
}
probe qemu.kvm.megasas_dcmd_invalid_xfer_len = process("/usr/libexec/qemu-kvm").mark("megasas_dcmd_invalid_xfer_len")
{
  cmd = $arg1;
  size = $arg2;
  max = $arg3;
}
probe qemu.kvm.megasas_dcmd_enter = process("/usr/libexec/qemu-kvm").mark("megasas_dcmd_enter")
{
  cmd = $arg1;
  dcmd = $arg2;
  len = $arg3;
}
probe qemu.kvm.megasas_dcmd_dummy = process("/usr/libexec/qemu-kvm").mark("megasas_dcmd_dummy")
{
  cmd = $arg1;
  size = $arg2;
}
probe qemu.kvm.megasas_dcmd_set_fw_time = process("/usr/libexec/qemu-kvm").mark("megasas_dcmd_set_fw_time")
{
  cmd = $arg1;
  time = $arg2;
}
probe qemu.kvm.megasas_dcmd_pd_get_list = process("/usr/libexec/qemu-kvm").mark("megasas_dcmd_pd_get_list")
{
  cmd = $arg1;
  num = $arg2;
  max = $arg3;
  offset = $arg4;
}
probe qemu.kvm.megasas_dcmd_ld_get_list = process("/usr/libexec/qemu-kvm").mark("megasas_dcmd_ld_get_list")
{
  cmd = $arg1;
  num = $arg2;
  max = $arg3;
}
probe qemu.kvm.megasas_dcmd_ld_get_info = process("/usr/libexec/qemu-kvm").mark("megasas_dcmd_ld_get_info")
{
  cmd = $arg1;
  ld_id = $arg2;
}
probe qemu.kvm.megasas_dcmd_pd_get_info = process("/usr/libexec/qemu-kvm").mark("megasas_dcmd_pd_get_info")
{
  cmd = $arg1;
  pd_id = $arg2;
}
probe qemu.kvm.megasas_dcmd_pd_list_query = process("/usr/libexec/qemu-kvm").mark("megasas_dcmd_pd_list_query")
{
  cmd = $arg1;
  flags = $arg2;
}
probe qemu.kvm.megasas_dcmd_unsupported = process("/usr/libexec/qemu-kvm").mark("megasas_dcmd_unsupported")
{
  cmd = $arg1;
  size = $arg2;
}
probe qemu.kvm.megasas_abort_frame = process("/usr/libexec/qemu-kvm").mark("megasas_abort_frame")
{
  cmd = $arg1;
  abort_cmd = $arg2;
}
probe qemu.kvm.megasas_abort_no_cmd = process("/usr/libexec/qemu-kvm").mark("megasas_abort_no_cmd")
{
  cmd = $arg1;
  context = $arg2;
}
probe qemu.kvm.megasas_abort_invalid_context = process("/usr/libexec/qemu-kvm").mark("megasas_abort_invalid_context")
{
  cmd = $arg1;
  context = $arg2;
  abort_cmd = $arg3;
}
probe qemu.kvm.megasas_reset = process("/usr/libexec/qemu-kvm").mark("megasas_reset")
{
}
probe qemu.kvm.megasas_init = process("/usr/libexec/qemu-kvm").mark("megasas_init")
{
  sges = $arg1;
  cmds = $arg2;
  intr = $arg3;
  mode = $arg4;
}
probe qemu.kvm.megasas_msix_raise = process("/usr/libexec/qemu-kvm").mark("megasas_msix_raise")
{
  vector = $arg1;
}
probe qemu.kvm.megasas_irq_lower = process("/usr/libexec/qemu-kvm").mark("megasas_irq_lower")
{
}
probe qemu.kvm.megasas_irq_raise = process("/usr/libexec/qemu-kvm").mark("megasas_irq_raise")
{
}
probe qemu.kvm.megasas_intr_enabled = process("/usr/libexec/qemu-kvm").mark("megasas_intr_enabled")
{
}
probe qemu.kvm.megasas_intr_disabled = process("/usr/libexec/qemu-kvm").mark("megasas_intr_disabled")
{
}
probe qemu.kvm.megasas_mmio_readl = process("/usr/libexec/qemu-kvm").mark("megasas_mmio_readl")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.megasas_mmio_invalid_readl = process("/usr/libexec/qemu-kvm").mark("megasas_mmio_invalid_readl")
{
  addr = $arg1;
}
probe qemu.kvm.megasas_mmio_writel = process("/usr/libexec/qemu-kvm").mark("megasas_mmio_writel")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.megasas_mmio_invalid_writel = process("/usr/libexec/qemu-kvm").mark("megasas_mmio_invalid_writel")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.milkymist_ac97_memory_read = process("/usr/libexec/qemu-kvm").mark("milkymist_ac97_memory_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.milkymist_ac97_memory_write = process("/usr/libexec/qemu-kvm").mark("milkymist_ac97_memory_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.milkymist_ac97_pulse_irq_crrequest = process("/usr/libexec/qemu-kvm").mark("milkymist_ac97_pulse_irq_crrequest")
{
}
probe qemu.kvm.milkymist_ac97_pulse_irq_crreply = process("/usr/libexec/qemu-kvm").mark("milkymist_ac97_pulse_irq_crreply")
{
}
probe qemu.kvm.milkymist_ac97_pulse_irq_dmaw = process("/usr/libexec/qemu-kvm").mark("milkymist_ac97_pulse_irq_dmaw")
{
}
probe qemu.kvm.milkymist_ac97_pulse_irq_dmar = process("/usr/libexec/qemu-kvm").mark("milkymist_ac97_pulse_irq_dmar")
{
}
probe qemu.kvm.milkymist_ac97_in_cb = process("/usr/libexec/qemu-kvm").mark("milkymist_ac97_in_cb")
{
  avail = $arg1;
  remaining = $arg2;
}
probe qemu.kvm.milkymist_ac97_in_cb_transferred = process("/usr/libexec/qemu-kvm").mark("milkymist_ac97_in_cb_transferred")
{
  transferred = $arg1;
}
probe qemu.kvm.milkymist_ac97_out_cb = process("/usr/libexec/qemu-kvm").mark("milkymist_ac97_out_cb")
{
  free = $arg1;
  remaining = $arg2;
}
probe qemu.kvm.milkymist_ac97_out_cb_transferred = process("/usr/libexec/qemu-kvm").mark("milkymist_ac97_out_cb_transferred")
{
  transferred = $arg1;
}
probe qemu.kvm.milkymist_hpdmc_memory_read = process("/usr/libexec/qemu-kvm").mark("milkymist_hpdmc_memory_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.milkymist_hpdmc_memory_write = process("/usr/libexec/qemu-kvm").mark("milkymist_hpdmc_memory_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.milkymist_memcard_memory_read = process("/usr/libexec/qemu-kvm").mark("milkymist_memcard_memory_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.milkymist_memcard_memory_write = process("/usr/libexec/qemu-kvm").mark("milkymist_memcard_memory_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.milkymist_minimac2_memory_read = process("/usr/libexec/qemu-kvm").mark("milkymist_minimac2_memory_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.milkymist_minimac2_memory_write = process("/usr/libexec/qemu-kvm").mark("milkymist_minimac2_memory_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.milkymist_minimac2_mdio_write = process("/usr/libexec/qemu-kvm").mark("milkymist_minimac2_mdio_write")
{
  phy_addr = $arg1;
  addr = $arg2;
  value = $arg3;
}
probe qemu.kvm.milkymist_minimac2_mdio_read = process("/usr/libexec/qemu-kvm").mark("milkymist_minimac2_mdio_read")
{
  phy_addr = $arg1;
  addr = $arg2;
  value = $arg3;
}
probe qemu.kvm.milkymist_minimac2_tx_frame = process("/usr/libexec/qemu-kvm").mark("milkymist_minimac2_tx_frame")
{
  length = $arg1;
}
probe qemu.kvm.milkymist_minimac2_rx_frame = process("/usr/libexec/qemu-kvm").mark("milkymist_minimac2_rx_frame")
{
  buf = $arg1;
  length = $arg2;
}
probe qemu.kvm.milkymist_minimac2_drop_rx_frame = process("/usr/libexec/qemu-kvm").mark("milkymist_minimac2_drop_rx_frame")
{
  buf = $arg1;
}
probe qemu.kvm.milkymist_minimac2_rx_transfer = process("/usr/libexec/qemu-kvm").mark("milkymist_minimac2_rx_transfer")
{
  buf = $arg1;
  length = $arg2;
}
probe qemu.kvm.milkymist_minimac2_raise_irq_rx = process("/usr/libexec/qemu-kvm").mark("milkymist_minimac2_raise_irq_rx")
{
}
probe qemu.kvm.milkymist_minimac2_lower_irq_rx = process("/usr/libexec/qemu-kvm").mark("milkymist_minimac2_lower_irq_rx")
{
}
probe qemu.kvm.milkymist_minimac2_pulse_irq_tx = process("/usr/libexec/qemu-kvm").mark("milkymist_minimac2_pulse_irq_tx")
{
}
probe qemu.kvm.milkymist_pfpu_memory_read = process("/usr/libexec/qemu-kvm").mark("milkymist_pfpu_memory_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.milkymist_pfpu_memory_write = process("/usr/libexec/qemu-kvm").mark("milkymist_pfpu_memory_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.milkymist_pfpu_vectout = process("/usr/libexec/qemu-kvm").mark("milkymist_pfpu_vectout")
{
  a = $arg1;
  b = $arg2;
  dma_ptr = $arg3;
}
probe qemu.kvm.milkymist_pfpu_pulse_irq = process("/usr/libexec/qemu-kvm").mark("milkymist_pfpu_pulse_irq")
{
}
probe qemu.kvm.milkymist_softusb_memory_read = process("/usr/libexec/qemu-kvm").mark("milkymist_softusb_memory_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.milkymist_softusb_memory_write = process("/usr/libexec/qemu-kvm").mark("milkymist_softusb_memory_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.milkymist_softusb_mevt = process("/usr/libexec/qemu-kvm").mark("milkymist_softusb_mevt")
{
  m = $arg1;
}
probe qemu.kvm.milkymist_softusb_kevt = process("/usr/libexec/qemu-kvm").mark("milkymist_softusb_kevt")
{
  m = $arg1;
}
probe qemu.kvm.milkymist_softusb_pulse_irq = process("/usr/libexec/qemu-kvm").mark("milkymist_softusb_pulse_irq")
{
}
probe qemu.kvm.milkymist_sysctl_memory_read = process("/usr/libexec/qemu-kvm").mark("milkymist_sysctl_memory_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.milkymist_sysctl_memory_write = process("/usr/libexec/qemu-kvm").mark("milkymist_sysctl_memory_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.milkymist_sysctl_icap_write = process("/usr/libexec/qemu-kvm").mark("milkymist_sysctl_icap_write")
{
  value = $arg1;
}
probe qemu.kvm.milkymist_sysctl_start_timer0 = process("/usr/libexec/qemu-kvm").mark("milkymist_sysctl_start_timer0")
{
}
probe qemu.kvm.milkymist_sysctl_stop_timer0 = process("/usr/libexec/qemu-kvm").mark("milkymist_sysctl_stop_timer0")
{
}
probe qemu.kvm.milkymist_sysctl_start_timer1 = process("/usr/libexec/qemu-kvm").mark("milkymist_sysctl_start_timer1")
{
}
probe qemu.kvm.milkymist_sysctl_stop_timer1 = process("/usr/libexec/qemu-kvm").mark("milkymist_sysctl_stop_timer1")
{
}
probe qemu.kvm.milkymist_sysctl_pulse_irq_timer0 = process("/usr/libexec/qemu-kvm").mark("milkymist_sysctl_pulse_irq_timer0")
{
}
probe qemu.kvm.milkymist_sysctl_pulse_irq_timer1 = process("/usr/libexec/qemu-kvm").mark("milkymist_sysctl_pulse_irq_timer1")
{
}
probe qemu.kvm.milkymist_tmu2_memory_read = process("/usr/libexec/qemu-kvm").mark("milkymist_tmu2_memory_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.milkymist_tmu2_memory_write = process("/usr/libexec/qemu-kvm").mark("milkymist_tmu2_memory_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.milkymist_tmu2_start = process("/usr/libexec/qemu-kvm").mark("milkymist_tmu2_start")
{
}
probe qemu.kvm.milkymist_tmu2_pulse_irq = process("/usr/libexec/qemu-kvm").mark("milkymist_tmu2_pulse_irq")
{
}
probe qemu.kvm.milkymist_uart_memory_read = process("/usr/libexec/qemu-kvm").mark("milkymist_uart_memory_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.milkymist_uart_memory_write = process("/usr/libexec/qemu-kvm").mark("milkymist_uart_memory_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.milkymist_uart_raise_irq = process("/usr/libexec/qemu-kvm").mark("milkymist_uart_raise_irq")
{
}
probe qemu.kvm.milkymist_uart_lower_irq = process("/usr/libexec/qemu-kvm").mark("milkymist_uart_lower_irq")
{
}
probe qemu.kvm.milkymist_vgafb_memory_read = process("/usr/libexec/qemu-kvm").mark("milkymist_vgafb_memory_read")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.milkymist_vgafb_memory_write = process("/usr/libexec/qemu-kvm").mark("milkymist_vgafb_memory_write")
{
  addr = $arg1;
  value = $arg2;
}
probe qemu.kvm.mipsnet_send = process("/usr/libexec/qemu-kvm").mark("mipsnet_send")
{
  size = $arg1;
}
probe qemu.kvm.mipsnet_receive = process("/usr/libexec/qemu-kvm").mark("mipsnet_receive")
{
  size = $arg1;
}
probe qemu.kvm.mipsnet_read = process("/usr/libexec/qemu-kvm").mark("mipsnet_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.mipsnet_write = process("/usr/libexec/qemu-kvm").mark("mipsnet_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.mipsnet_irq = process("/usr/libexec/qemu-kvm").mark("mipsnet_irq")
{
  isr = $arg1;
  intctl = $arg2;
}
probe qemu.kvm.pc87312_io_read = process("/usr/libexec/qemu-kvm").mark("pc87312_io_read")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.pc87312_io_write = process("/usr/libexec/qemu-kvm").mark("pc87312_io_write")
{
  addr = $arg1;
  val = $arg2;
}
probe qemu.kvm.pc87312_info_floppy = process("/usr/libexec/qemu-kvm").mark("pc87312_info_floppy")
{
  base = $arg1;
}
probe qemu.kvm.pc87312_info_ide = process("/usr/libexec/qemu-kvm").mark("pc87312_info_ide")
{
  base = $arg1;
}
probe qemu.kvm.pc87312_info_parallel = process("/usr/libexec/qemu-kvm").mark("pc87312_info_parallel")
{
  base = $arg1;
  irq = $arg2;
}
probe qemu.kvm.pc87312_info_serial = process("/usr/libexec/qemu-kvm").mark("pc87312_info_serial")
{
  n = $arg1;
  base = $arg2;
  irq = $arg3;
}
probe qemu.kvm.pvscsi_ring_init_data = process("/usr/libexec/qemu-kvm").mark("pvscsi_ring_init_data")
{
  txr_len_log2 = $arg1;
  rxr_len_log2 = $arg2;
}
probe qemu.kvm.pvscsi_ring_init_msg = process("/usr/libexec/qemu-kvm").mark("pvscsi_ring_init_msg")
{
  len_log2 = $arg1;
}
probe qemu.kvm.pvscsi_ring_flush_cmp = process("/usr/libexec/qemu-kvm").mark("pvscsi_ring_flush_cmp")
{
  filled_cmp_ptr = $arg1;
}
probe qemu.kvm.pvscsi_ring_flush_msg = process("/usr/libexec/qemu-kvm").mark("pvscsi_ring_flush_msg")
{
  filled_cmp_ptr = $arg1;
}
probe qemu.kvm.pvscsi_update_irq_level = process("/usr/libexec/qemu-kvm").mark("pvscsi_update_irq_level")
{
  raise = $arg1;
  mask = $arg2;
  status = $arg3;
}
probe qemu.kvm.pvscsi_update_irq_msi = process("/usr/libexec/qemu-kvm").mark("pvscsi_update_irq_msi")
{
}
probe qemu.kvm.pvscsi_cmp_ring_put = process("/usr/libexec/qemu-kvm").mark("pvscsi_cmp_ring_put")
{
  addr = $arg1;
}
probe qemu.kvm.pvscsi_msg_ring_put = process("/usr/libexec/qemu-kvm").mark("pvscsi_msg_ring_put")
{
  addr = $arg1;
}
probe qemu.kvm.pvscsi_complete_request = process("/usr/libexec/qemu-kvm").mark("pvscsi_complete_request")
{
  context = $arg1;
  len = $arg2;
  sense_key = $arg3;
}
probe qemu.kvm.pvscsi_get_sg_list = process("/usr/libexec/qemu-kvm").mark("pvscsi_get_sg_list")
{
  nsg = $arg1;
  size = $arg2;
}
probe qemu.kvm.pvscsi_get_next_sg_elem = process("/usr/libexec/qemu-kvm").mark("pvscsi_get_next_sg_elem")
{
  flags = $arg1;
}
probe qemu.kvm.pvscsi_command_complete_not_found = process("/usr/libexec/qemu-kvm").mark("pvscsi_command_complete_not_found")
{
  tag = $arg1;
}
probe qemu.kvm.pvscsi_command_complete_data_run = process("/usr/libexec/qemu-kvm").mark("pvscsi_command_complete_data_run")
{
}
probe qemu.kvm.pvscsi_command_complete_sense_len = process("/usr/libexec/qemu-kvm").mark("pvscsi_command_complete_sense_len")
{
  len = $arg1;
}
probe qemu.kvm.pvscsi_convert_sglist = process("/usr/libexec/qemu-kvm").mark("pvscsi_convert_sglist")
{
  context = $arg1;
  addr = $arg2;
  resid = $arg3;
}
probe qemu.kvm.pvscsi_process_req_descr = process("/usr/libexec/qemu-kvm").mark("pvscsi_process_req_descr")
{
  cmd = $arg1;
  ctx = $arg2;
}
probe qemu.kvm.pvscsi_process_req_descr_unknown_device = process("/usr/libexec/qemu-kvm").mark("pvscsi_process_req_descr_unknown_device")
{
}
probe qemu.kvm.pvscsi_process_req_descr_invalid_dir = process("/usr/libexec/qemu-kvm").mark("pvscsi_process_req_descr_invalid_dir")
{
}
probe qemu.kvm.pvscsi_process_io = process("/usr/libexec/qemu-kvm").mark("pvscsi_process_io")
{
  addr = $arg1;
}
probe qemu.kvm.pvscsi_on_cmd_noimpl = process("/usr/libexec/qemu-kvm").mark("pvscsi_on_cmd_noimpl")
{
  cmd = $arg1;
}
probe qemu.kvm.pvscsi_on_cmd_reset_dev = process("/usr/libexec/qemu-kvm").mark("pvscsi_on_cmd_reset_dev")
{
  tgt = $arg1;
  lun = $arg2;
  dev = $arg3;
}
probe qemu.kvm.pvscsi_on_cmd_arrived = process("/usr/libexec/qemu-kvm").mark("pvscsi_on_cmd_arrived")
{
  cmd = $arg1;
}
probe qemu.kvm.pvscsi_on_cmd_abort = process("/usr/libexec/qemu-kvm").mark("pvscsi_on_cmd_abort")
{
  ctx = $arg1;
  tgt = $arg2;
}
probe qemu.kvm.pvscsi_on_cmd_unknown = process("/usr/libexec/qemu-kvm").mark("pvscsi_on_cmd_unknown")
{
  cmd_id = $arg1;
}
probe qemu.kvm.pvscsi_on_cmd_unknown_data = process("/usr/libexec/qemu-kvm").mark("pvscsi_on_cmd_unknown_data")
{
  data = $arg1;
}
probe qemu.kvm.pvscsi_io_write = process("/usr/libexec/qemu-kvm").mark("pvscsi_io_write")
{
  cmd = $arg1;
  val = $arg2;
}
probe qemu.kvm.pvscsi_io_write_unknown = process("/usr/libexec/qemu-kvm").mark("pvscsi_io_write_unknown")
{
  addr = $arg1;
  sz = $arg2;
  val = $arg3;
}
probe qemu.kvm.pvscsi_io_read = process("/usr/libexec/qemu-kvm").mark("pvscsi_io_read")
{
  cmd = $arg1;
  status = $arg2;
}
probe qemu.kvm.pvscsi_io_read_unknown = process("/usr/libexec/qemu-kvm").mark("pvscsi_io_read_unknown")
{
  addr = $arg1;
  sz = $arg2;
}
probe qemu.kvm.pvscsi_init_msi_fail = process("/usr/libexec/qemu-kvm").mark("pvscsi_init_msi_fail")
{
  res = $arg1;
}
probe qemu.kvm.pvscsi_state = process("/usr/libexec/qemu-kvm").mark("pvscsi_state")
{
  state = $arg1;
}
probe qemu.kvm.pvscsi_tx_rings_ppn = process("/usr/libexec/qemu-kvm").mark("pvscsi_tx_rings_ppn")
{
  label = $arg1;
  ppn = $arg2;
}
probe qemu.kvm.pvscsi_tx_rings_num_pages = process("/usr/libexec/qemu-kvm").mark("pvscsi_tx_rings_num_pages")
{
  label = $arg1;
  num = $arg2;
}
probe qemu.kvm.xen_ram_alloc = process("/usr/libexec/qemu-kvm").mark("xen_ram_alloc")
{
  ram_addr = $arg1;
  size = $arg2;
}
probe qemu.kvm.xen_client_set_memory = process("/usr/libexec/qemu-kvm").mark("xen_client_set_memory")
{
  start_addr = $arg1;
  size = $arg2;
  log_dirty = $arg3;
}
probe qemu.kvm.xen_map_cache = process("/usr/libexec/qemu-kvm").mark("xen_map_cache")
{
  phys_addr = $arg1;
}
probe qemu.kvm.xen_remap_bucket = process("/usr/libexec/qemu-kvm").mark("xen_remap_bucket")
{
  index = $arg1;
}
probe qemu.kvm.xen_map_cache_return = process("/usr/libexec/qemu-kvm").mark("xen_map_cache_return")
{
  ptr = $arg1;
}
probe qemu.kvm.qemu_put_ram_ptr = process("/usr/libexec/qemu-kvm").mark("qemu_put_ram_ptr")
{
  addr = $arg1;
}
probe qemu.kvm.xen_platform_log = process("/usr/libexec/qemu-kvm").mark("xen_platform_log")
{
  s = $arg1;
}
probe qemu.kvm.qemu_coroutine_enter = process("/usr/libexec/qemu-kvm").mark("qemu_coroutine_enter")
{
  from = $arg1;
  to = $arg2;
  opaque = $arg3;
}
probe qemu.kvm.qemu_coroutine_yield = process("/usr/libexec/qemu-kvm").mark("qemu_coroutine_yield")
{
  from = $arg1;
  to = $arg2;
}
probe qemu.kvm.qemu_coroutine_terminate = process("/usr/libexec/qemu-kvm").mark("qemu_coroutine_terminate")
{
  co = $arg1;
}
probe qemu.kvm.qemu_co_queue_next_bh = process("/usr/libexec/qemu-kvm").mark("qemu_co_queue_next_bh")
{
}
probe qemu.kvm.qemu_co_queue_next = process("/usr/libexec/qemu-kvm").mark("qemu_co_queue_next")
{
  nxt = $arg1;
}
probe qemu.kvm.qemu_co_mutex_lock_entry = process("/usr/libexec/qemu-kvm").mark("qemu_co_mutex_lock_entry")
{
  mutex = $arg1;
  self_ = $arg2;
}
probe qemu.kvm.qemu_co_mutex_lock_return = process("/usr/libexec/qemu-kvm").mark("qemu_co_mutex_lock_return")
{
  mutex = $arg1;
  self_ = $arg2;
}
probe qemu.kvm.qemu_co_mutex_unlock_entry = process("/usr/libexec/qemu-kvm").mark("qemu_co_mutex_unlock_entry")
{
  mutex = $arg1;
  self_ = $arg2;
}
probe qemu.kvm.qemu_co_mutex_unlock_return = process("/usr/libexec/qemu-kvm").mark("qemu_co_mutex_unlock_return")
{
  mutex = $arg1;
  self_ = $arg2;
}
probe qemu.kvm.escc_put_queue = process("/usr/libexec/qemu-kvm").mark("escc_put_queue")
{
  channel = $arg1;
  b = $arg2;
}
probe qemu.kvm.escc_get_queue = process("/usr/libexec/qemu-kvm").mark("escc_get_queue")
{
  channel = $arg1;
  val = $arg2;
}
probe qemu.kvm.escc_update_irq = process("/usr/libexec/qemu-kvm").mark("escc_update_irq")
{
  irq = $arg1;
}
probe qemu.kvm.escc_update_parameters = process("/usr/libexec/qemu-kvm").mark("escc_update_parameters")
{
  channel = $arg1;
  speed = $arg2;
  parity = $arg3;
  data_bits = $arg4;
  stop_bits = $arg5;
}
probe qemu.kvm.escc_mem_writeb_ctrl = process("/usr/libexec/qemu-kvm").mark("escc_mem_writeb_ctrl")
{
  channel = $arg1;
  reg = $arg2;
  val = $arg3;
}
probe qemu.kvm.escc_mem_writeb_data = process("/usr/libexec/qemu-kvm").mark("escc_mem_writeb_data")
{
  channel = $arg1;
  val = $arg2;
}
probe qemu.kvm.escc_mem_readb_ctrl = process("/usr/libexec/qemu-kvm").mark("escc_mem_readb_ctrl")
{
  channel = $arg1;
  reg = $arg2;
  val = $arg3;
}
probe qemu.kvm.escc_mem_readb_data = process("/usr/libexec/qemu-kvm").mark("escc_mem_readb_data")
{
  channel = $arg1;
  ret = $arg2;
}
probe qemu.kvm.escc_serial_receive_byte = process("/usr/libexec/qemu-kvm").mark("escc_serial_receive_byte")
{
  channel = $arg1;
  ch = $arg2;
}
probe qemu.kvm.escc_sunkbd_event_in = process("/usr/libexec/qemu-kvm").mark("escc_sunkbd_event_in")
{
  ch = $arg1;
}
probe qemu.kvm.escc_sunkbd_event_out = process("/usr/libexec/qemu-kvm").mark("escc_sunkbd_event_out")
{
  ch = $arg1;
}
probe qemu.kvm.escc_kbd_command = process("/usr/libexec/qemu-kvm").mark("escc_kbd_command")
{
  val = $arg1;
}
probe qemu.kvm.escc_sunmouse_event = process("/usr/libexec/qemu-kvm").mark("escc_sunmouse_event")
{
  dx = $arg1;
  dy = $arg2;
  buttons_state = $arg3;
}
probe qemu.kvm.iscsi_aio_write16_cb = process("/usr/libexec/qemu-kvm").mark("iscsi_aio_write16_cb")
{
  iscsi = $arg1;
  status = $arg2;
  acb = $arg3;
  canceled = $arg4;
}
probe qemu.kvm.iscsi_aio_writev = process("/usr/libexec/qemu-kvm").mark("iscsi_aio_writev")
{
  iscsi = $arg1;
  sector_num = $arg2;
  nb_sectors = $arg3;
  opaque = $arg4;
  acb = $arg5;
}
probe qemu.kvm.iscsi_aio_read16_cb = process("/usr/libexec/qemu-kvm").mark("iscsi_aio_read16_cb")
{
  iscsi = $arg1;
  status = $arg2;
  acb = $arg3;
  canceled = $arg4;
}
probe qemu.kvm.iscsi_aio_readv = process("/usr/libexec/qemu-kvm").mark("iscsi_aio_readv")
{
  iscsi = $arg1;
  sector_num = $arg2;
  nb_sectors = $arg3;
  opaque = $arg4;
  acb = $arg5;
}
probe qemu.kvm.esp_error_fifo_overrun = process("/usr/libexec/qemu-kvm").mark("esp_error_fifo_overrun")
{
}
probe qemu.kvm.esp_error_unhandled_command = process("/usr/libexec/qemu-kvm").mark("esp_error_unhandled_command")
{
  val = $arg1;
}
probe qemu.kvm.esp_error_invalid_write = process("/usr/libexec/qemu-kvm").mark("esp_error_invalid_write")
{
  val = $arg1;
  addr = $arg2;
}
probe qemu.kvm.esp_raise_irq = process("/usr/libexec/qemu-kvm").mark("esp_raise_irq")
{
}
probe qemu.kvm.esp_lower_irq = process("/usr/libexec/qemu-kvm").mark("esp_lower_irq")
{
}
probe qemu.kvm.esp_dma_enable = process("/usr/libexec/qemu-kvm").mark("esp_dma_enable")
{
}
probe qemu.kvm.esp_dma_disable = process("/usr/libexec/qemu-kvm").mark("esp_dma_disable")
{
}
probe qemu.kvm.esp_get_cmd = process("/usr/libexec/qemu-kvm").mark("esp_get_cmd")
{
  dmalen = $arg1;
  target = $arg2;
}
probe qemu.kvm.esp_do_busid_cmd = process("/usr/libexec/qemu-kvm").mark("esp_do_busid_cmd")
{
  busid = $arg1;
}
probe qemu.kvm.esp_handle_satn_stop = process("/usr/libexec/qemu-kvm").mark("esp_handle_satn_stop")
{
  cmdlen = $arg1;
}
probe qemu.kvm.esp_write_response = process("/usr/libexec/qemu-kvm").mark("esp_write_response")
{
  status = $arg1;
}
probe qemu.kvm.esp_do_dma = process("/usr/libexec/qemu-kvm").mark("esp_do_dma")
{
  cmdlen = $arg1;
  len = $arg2;
}
probe qemu.kvm.esp_command_complete = process("/usr/libexec/qemu-kvm").mark("esp_command_complete")
{
}
probe qemu.kvm.esp_command_complete_unexpected = process("/usr/libexec/qemu-kvm").mark("esp_command_complete_unexpected")
{
}
probe qemu.kvm.esp_command_complete_fail = process("/usr/libexec/qemu-kvm").mark("esp_command_complete_fail")
{
}
probe qemu.kvm.esp_transfer_data = process("/usr/libexec/qemu-kvm").mark("esp_transfer_data")
{
  dma_left = $arg1;
  ti_size = $arg2;
}
probe qemu.kvm.esp_handle_ti = process("/usr/libexec/qemu-kvm").mark("esp_handle_ti")
{
  minlen = $arg1;
}
probe qemu.kvm.esp_handle_ti_cmd = process("/usr/libexec/qemu-kvm").mark("esp_handle_ti_cmd")
{
  cmdlen = $arg1;
}
probe qemu.kvm.esp_mem_readb = process("/usr/libexec/qemu-kvm").mark("esp_mem_readb")
{
  saddr = $arg1;
  reg = $arg2;
}
probe qemu.kvm.esp_mem_writeb = process("/usr/libexec/qemu-kvm").mark("esp_mem_writeb")
{
  saddr = $arg1;
  reg = $arg2;
  val = $arg3;
}
probe qemu.kvm.esp_mem_writeb_cmd_nop = process("/usr/libexec/qemu-kvm").mark("esp_mem_writeb_cmd_nop")
{
  val = $arg1;
}
probe qemu.kvm.esp_mem_writeb_cmd_flush = process("/usr/libexec/qemu-kvm").mark("esp_mem_writeb_cmd_flush")
{
  val = $arg1;
}
probe qemu.kvm.esp_mem_writeb_cmd_reset = process("/usr/libexec/qemu-kvm").mark("esp_mem_writeb_cmd_reset")
{
  val = $arg1;
}
probe qemu.kvm.esp_mem_writeb_cmd_bus_reset = process("/usr/libexec/qemu-kvm").mark("esp_mem_writeb_cmd_bus_reset")
{
  val = $arg1;
}
probe qemu.kvm.esp_mem_writeb_cmd_iccs = process("/usr/libexec/qemu-kvm").mark("esp_mem_writeb_cmd_iccs")
{
  val = $arg1;
}
probe qemu.kvm.esp_mem_writeb_cmd_msgacc = process("/usr/libexec/qemu-kvm").mark("esp_mem_writeb_cmd_msgacc")
{
  val = $arg1;
}
probe qemu.kvm.esp_mem_writeb_cmd_pad = process("/usr/libexec/qemu-kvm").mark("esp_mem_writeb_cmd_pad")
{
  val = $arg1;
}
probe qemu.kvm.esp_mem_writeb_cmd_satn = process("/usr/libexec/qemu-kvm").mark("esp_mem_writeb_cmd_satn")
{
  val = $arg1;
}
probe qemu.kvm.esp_mem_writeb_cmd_rstatn = process("/usr/libexec/qemu-kvm").mark("esp_mem_writeb_cmd_rstatn")
{
  val = $arg1;
}
probe qemu.kvm.esp_mem_writeb_cmd_sel = process("/usr/libexec/qemu-kvm").mark("esp_mem_writeb_cmd_sel")
{
  val = $arg1;
}
probe qemu.kvm.esp_mem_writeb_cmd_selatn = process("/usr/libexec/qemu-kvm").mark("esp_mem_writeb_cmd_selatn")
{
  val = $arg1;
}
probe qemu.kvm.esp_mem_writeb_cmd_selatns = process("/usr/libexec/qemu-kvm").mark("esp_mem_writeb_cmd_selatns")
{
  val = $arg1;
}
probe qemu.kvm.esp_mem_writeb_cmd_ensel = process("/usr/libexec/qemu-kvm").mark("esp_mem_writeb_cmd_ensel")
{
  val = $arg1;
}
probe qemu.kvm.esp_mem_writeb_cmd_dissel = process("/usr/libexec/qemu-kvm").mark("esp_mem_writeb_cmd_dissel")
{
  val = $arg1;
}
probe qemu.kvm.esp_pci_error_invalid_dma_direction = process("/usr/libexec/qemu-kvm").mark("esp_pci_error_invalid_dma_direction")
{
}
probe qemu.kvm.esp_pci_error_invalid_read = process("/usr/libexec/qemu-kvm").mark("esp_pci_error_invalid_read")
{
  reg = $arg1;
}
probe qemu.kvm.esp_pci_error_invalid_write = process("/usr/libexec/qemu-kvm").mark("esp_pci_error_invalid_write")
{
  reg = $arg1;
}
probe qemu.kvm.esp_pci_error_invalid_write_dma = process("/usr/libexec/qemu-kvm").mark("esp_pci_error_invalid_write_dma")
{
  val = $arg1;
  addr = $arg2;
}
probe qemu.kvm.esp_pci_dma_read = process("/usr/libexec/qemu-kvm").mark("esp_pci_dma_read")
{
  saddr = $arg1;
  reg = $arg2;
}
probe qemu.kvm.esp_pci_dma_write = process("/usr/libexec/qemu-kvm").mark("esp_pci_dma_write")
{
  saddr = $arg1;
  reg = $arg2;
  val = $arg3;
}
probe qemu.kvm.esp_pci_dma_idle = process("/usr/libexec/qemu-kvm").mark("esp_pci_dma_idle")
{
  val = $arg1;
}
probe qemu.kvm.esp_pci_dma_blast = process("/usr/libexec/qemu-kvm").mark("esp_pci_dma_blast")
{
  val = $arg1;
}
probe qemu.kvm.esp_pci_dma_abort = process("/usr/libexec/qemu-kvm").mark("esp_pci_dma_abort")
{
  val = $arg1;
}
probe qemu.kvm.esp_pci_dma_start = process("/usr/libexec/qemu-kvm").mark("esp_pci_dma_start")
{
  val = $arg1;
}
probe qemu.kvm.esp_pci_sbac_read = process("/usr/libexec/qemu-kvm").mark("esp_pci_sbac_read")
{
  reg = $arg1;
}
probe qemu.kvm.esp_pci_sbac_write = process("/usr/libexec/qemu-kvm").mark("esp_pci_sbac_write")
{
  reg = $arg1;
  val = $arg2;
}
probe qemu.kvm.handle_qmp_command = process("/usr/libexec/qemu-kvm").mark("handle_qmp_command")
{
  mon = $arg1;
  cmd_name = $arg2;
}
probe qemu.kvm.monitor_protocol_emitter = process("/usr/libexec/qemu-kvm").mark("monitor_protocol_emitter")
{
  mon = $arg1;
}
probe qemu.kvm.monitor_protocol_event = process("/usr/libexec/qemu-kvm").mark("monitor_protocol_event")
{
  event = $arg1;
  evname = $arg2;
  data = $arg3;
}
probe qemu.kvm.monitor_protocol_event_handler = process("/usr/libexec/qemu-kvm").mark("monitor_protocol_event_handler")
{
  event = $arg1;
  data = $arg2;
  last = $arg3;
  now = $arg4;
}
probe qemu.kvm.monitor_protocol_event_emit = process("/usr/libexec/qemu-kvm").mark("monitor_protocol_event_emit")
{
  event = $arg1;
  data = $arg2;
}
probe qemu.kvm.monitor_protocol_event_queue = process("/usr/libexec/qemu-kvm").mark("monitor_protocol_event_queue")
{
  event = $arg1;
  data = $arg2;
  rate = $arg3;
  last = $arg4;
  now = $arg5;
}
probe qemu.kvm.monitor_protocol_event_throttle = process("/usr/libexec/qemu-kvm").mark("monitor_protocol_event_throttle")
{
  event = $arg1;
  rate = $arg2;
}
probe qemu.kvm.open_eth_mii_write = process("/usr/libexec/qemu-kvm").mark("open_eth_mii_write")
{
  idx = $arg1;
  v = $arg2;
}
probe qemu.kvm.open_eth_mii_read = process("/usr/libexec/qemu-kvm").mark("open_eth_mii_read")
{
  idx = $arg1;
  v = $arg2;
}
probe qemu.kvm.open_eth_update_irq = process("/usr/libexec/qemu-kvm").mark("open_eth_update_irq")
{
  v = $arg1;
}
probe qemu.kvm.open_eth_receive = process("/usr/libexec/qemu-kvm").mark("open_eth_receive")
{
  len = $arg1;
}
probe qemu.kvm.open_eth_receive_mcast = process("/usr/libexec/qemu-kvm").mark("open_eth_receive_mcast")
{
  idx = $arg1;
  h0 = $arg2;
  h1 = $arg3;
}
probe qemu.kvm.open_eth_receive_reject = process("/usr/libexec/qemu-kvm").mark("open_eth_receive_reject")
{
}
probe qemu.kvm.open_eth_receive_desc = process("/usr/libexec/qemu-kvm").mark("open_eth_receive_desc")
{
  addr = $arg1;
  len_flags = $arg2;
}
probe qemu.kvm.open_eth_start_xmit = process("/usr/libexec/qemu-kvm").mark("open_eth_start_xmit")
{
  addr = $arg1;
  len = $arg2;
  tx_len = $arg3;
}
probe qemu.kvm.open_eth_reg_read = process("/usr/libexec/qemu-kvm").mark("open_eth_reg_read")
{
  addr = $arg1;
  v = $arg2;
}
probe qemu.kvm.open_eth_reg_write = process("/usr/libexec/qemu-kvm").mark("open_eth_reg_write")
{
  addr = $arg1;
  v = $arg2;
}
probe qemu.kvm.open_eth_desc_read = process("/usr/libexec/qemu-kvm").mark("open_eth_desc_read")
{
  addr = $arg1;
  v = $arg2;
}
probe qemu.kvm.open_eth_desc_write = process("/usr/libexec/qemu-kvm").mark("open_eth_desc_write")
{
  addr = $arg1;
  v = $arg2;
}
probe qemu.kvm.v9fs_rerror = process("/usr/libexec/qemu-kvm").mark("v9fs_rerror")
{
  tag = $arg1;
  id = $arg2;
  err = $arg3;
}
probe qemu.kvm.v9fs_version = process("/usr/libexec/qemu-kvm").mark("v9fs_version")
{
  tag = $arg1;
  id = $arg2;
  msize = $arg3;
  version = $arg4;
}
probe qemu.kvm.v9fs_version_return = process("/usr/libexec/qemu-kvm").mark("v9fs_version_return")
{
  tag = $arg1;
  id = $arg2;
  msize = $arg3;
  version = $arg4;
}
probe qemu.kvm.v9fs_attach = process("/usr/libexec/qemu-kvm").mark("v9fs_attach")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  afid = $arg4;
  uname = $arg5;
  aname = $arg6;
}
probe qemu.kvm.v9fs_attach_return = process("/usr/libexec/qemu-kvm").mark("v9fs_attach_return")
{
  tag = $arg1;
  id = $arg2;
  type = $arg3;
  version = $arg4;
  path = $arg5;
}
probe qemu.kvm.v9fs_stat = process("/usr/libexec/qemu-kvm").mark("v9fs_stat")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
}
probe qemu.kvm.v9fs_stat_return = process("/usr/libexec/qemu-kvm").mark("v9fs_stat_return")
{
  tag = $arg1;
  id = $arg2;
  mode = $arg3;
  atime = $arg4;
  mtime = $arg5;
  length = $arg6;
}
probe qemu.kvm.v9fs_getattr = process("/usr/libexec/qemu-kvm").mark("v9fs_getattr")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  request_mask = $arg4;
}
probe qemu.kvm.v9fs_getattr_return = process("/usr/libexec/qemu-kvm").mark("v9fs_getattr_return")
{
  tag = $arg1;
  id = $arg2;
  result_mask = $arg3;
  mode = $arg4;
  uid = $arg5;
  gid = $arg6;
}
probe qemu.kvm.v9fs_walk = process("/usr/libexec/qemu-kvm").mark("v9fs_walk")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  newfid = $arg4;
  nwnames = $arg5;
}
probe qemu.kvm.v9fs_walk_return = process("/usr/libexec/qemu-kvm").mark("v9fs_walk_return")
{
  tag = $arg1;
  id = $arg2;
  nwnames = $arg3;
  qids = $arg4;
}
probe qemu.kvm.v9fs_open = process("/usr/libexec/qemu-kvm").mark("v9fs_open")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  mode = $arg4;
}
probe qemu.kvm.v9fs_open_return = process("/usr/libexec/qemu-kvm").mark("v9fs_open_return")
{
  tag = $arg1;
  id = $arg2;
  type = $arg3;
  version = $arg4;
  path = $arg5;
  iounit = $arg6;
}
probe qemu.kvm.v9fs_lcreate = process("/usr/libexec/qemu-kvm").mark("v9fs_lcreate")
{
  tag = $arg1;
  id = $arg2;
  dfid = $arg3;
  flags = $arg4;
  mode = $arg5;
  gid = $arg6;
}
probe qemu.kvm.v9fs_lcreate_return = process("/usr/libexec/qemu-kvm").mark("v9fs_lcreate_return")
{
  tag = $arg1;
  id = $arg2;
  type = $arg3;
  version = $arg4;
  path = $arg5;
  iounit = $arg6;
}
probe qemu.kvm.v9fs_fsync = process("/usr/libexec/qemu-kvm").mark("v9fs_fsync")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  datasync = $arg4;
}
probe qemu.kvm.v9fs_clunk = process("/usr/libexec/qemu-kvm").mark("v9fs_clunk")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
}
probe qemu.kvm.v9fs_read = process("/usr/libexec/qemu-kvm").mark("v9fs_read")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  off = $arg4;
  max_count = $arg5;
}
probe qemu.kvm.v9fs_read_return = process("/usr/libexec/qemu-kvm").mark("v9fs_read_return")
{
  tag = $arg1;
  id = $arg2;
  count = $arg3;
  err = $arg4;
}
probe qemu.kvm.v9fs_readdir = process("/usr/libexec/qemu-kvm").mark("v9fs_readdir")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  offset = $arg4;
  max_count = $arg5;
}
probe qemu.kvm.v9fs_readdir_return = process("/usr/libexec/qemu-kvm").mark("v9fs_readdir_return")
{
  tag = $arg1;
  id = $arg2;
  count = $arg3;
  retval = $arg4;
}
probe qemu.kvm.v9fs_write = process("/usr/libexec/qemu-kvm").mark("v9fs_write")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  off = $arg4;
  count = $arg5;
  cnt = $arg6;
}
probe qemu.kvm.v9fs_write_return = process("/usr/libexec/qemu-kvm").mark("v9fs_write_return")
{
  tag = $arg1;
  id = $arg2;
  total = $arg3;
  err = $arg4;
}
probe qemu.kvm.v9fs_create = process("/usr/libexec/qemu-kvm").mark("v9fs_create")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  name = $arg4;
  perm = $arg5;
  mode = $arg6;
}
probe qemu.kvm.v9fs_create_return = process("/usr/libexec/qemu-kvm").mark("v9fs_create_return")
{
  tag = $arg1;
  id = $arg2;
  type = $arg3;
  version = $arg4;
  path = $arg5;
  iounit = $arg6;
}
probe qemu.kvm.v9fs_symlink = process("/usr/libexec/qemu-kvm").mark("v9fs_symlink")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  name = $arg4;
  symname = $arg5;
  gid = $arg6;
}
probe qemu.kvm.v9fs_symlink_return = process("/usr/libexec/qemu-kvm").mark("v9fs_symlink_return")
{
  tag = $arg1;
  id = $arg2;
  type = $arg3;
  version = $arg4;
  path = $arg5;
}
probe qemu.kvm.v9fs_flush = process("/usr/libexec/qemu-kvm").mark("v9fs_flush")
{
  tag = $arg1;
  id = $arg2;
  flush_tag = $arg3;
}
probe qemu.kvm.v9fs_link = process("/usr/libexec/qemu-kvm").mark("v9fs_link")
{
  tag = $arg1;
  id = $arg2;
  dfid = $arg3;
  oldfid = $arg4;
  name = $arg5;
}
probe qemu.kvm.v9fs_remove = process("/usr/libexec/qemu-kvm").mark("v9fs_remove")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
}
probe qemu.kvm.v9fs_wstat = process("/usr/libexec/qemu-kvm").mark("v9fs_wstat")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  mode = $arg4;
  atime = $arg5;
  mtime = $arg6;
}
probe qemu.kvm.v9fs_mknod = process("/usr/libexec/qemu-kvm").mark("v9fs_mknod")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  mode = $arg4;
  major = $arg5;
  minor = $arg6;
}
probe qemu.kvm.v9fs_mknod_return = process("/usr/libexec/qemu-kvm").mark("v9fs_mknod_return")
{
  tag = $arg1;
  id = $arg2;
  type = $arg3;
  version = $arg4;
  path = $arg5;
}
probe qemu.kvm.v9fs_lock = process("/usr/libexec/qemu-kvm").mark("v9fs_lock")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  type = $arg4;
  start = $arg5;
  length = $arg6;
}
probe qemu.kvm.v9fs_lock_return = process("/usr/libexec/qemu-kvm").mark("v9fs_lock_return")
{
  tag = $arg1;
  id = $arg2;
  status = $arg3;
}
probe qemu.kvm.v9fs_getlock = process("/usr/libexec/qemu-kvm").mark("v9fs_getlock")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  type = $arg4;
  start = $arg5;
  length = $arg6;
}
probe qemu.kvm.v9fs_getlock_return = process("/usr/libexec/qemu-kvm").mark("v9fs_getlock_return")
{
  tag = $arg1;
  id = $arg2;
  type = $arg3;
  start = $arg4;
  length = $arg5;
  proc_id = $arg6;
}
probe qemu.kvm.v9fs_mkdir = process("/usr/libexec/qemu-kvm").mark("v9fs_mkdir")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  name = $arg4;
  mode = $arg5;
  gid = $arg6;
}
probe qemu.kvm.v9fs_mkdir_return = process("/usr/libexec/qemu-kvm").mark("v9fs_mkdir_return")
{
  tag = $arg1;
  id = $arg2;
  type = $arg3;
  version = $arg4;
  path = $arg5;
  err = $arg6;
}
probe qemu.kvm.v9fs_xattrwalk = process("/usr/libexec/qemu-kvm").mark("v9fs_xattrwalk")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  newfid = $arg4;
  name = $arg5;
}
probe qemu.kvm.v9fs_xattrwalk_return = process("/usr/libexec/qemu-kvm").mark("v9fs_xattrwalk_return")
{
  tag = $arg1;
  id = $arg2;
  size = $arg3;
}
probe qemu.kvm.v9fs_xattrcreate = process("/usr/libexec/qemu-kvm").mark("v9fs_xattrcreate")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
  name = $arg4;
  size = $arg5;
  flags = $arg6;
}
probe qemu.kvm.v9fs_readlink = process("/usr/libexec/qemu-kvm").mark("v9fs_readlink")
{
  tag = $arg1;
  id = $arg2;
  fid = $arg3;
}
probe qemu.kvm.v9fs_readlink_return = process("/usr/libexec/qemu-kvm").mark("v9fs_readlink_return")
{
  tag = $arg1;
  id = $arg2;
  target = $arg3;
}
probe qemu.kvm.mmu_helper_dfault = process("/usr/libexec/qemu-kvm").mark("mmu_helper_dfault")
{
  address = $arg1;
  context = $arg2;
  mmu_idx = $arg3;
  tl = $arg4;
}
probe qemu.kvm.mmu_helper_dprot = process("/usr/libexec/qemu-kvm").mark("mmu_helper_dprot")
{
  address = $arg1;
  context = $arg2;
  mmu_idx = $arg3;
  tl = $arg4;
}
probe qemu.kvm.mmu_helper_dmiss = process("/usr/libexec/qemu-kvm").mark("mmu_helper_dmiss")
{
  address = $arg1;
  context = $arg2;
}
probe qemu.kvm.mmu_helper_tfault = process("/usr/libexec/qemu-kvm").mark("mmu_helper_tfault")
{
  address = $arg1;
  context = $arg2;
}
probe qemu.kvm.mmu_helper_tmiss = process("/usr/libexec/qemu-kvm").mark("mmu_helper_tmiss")
{
  address = $arg1;
  context = $arg2;
}
probe qemu.kvm.mmu_helper_get_phys_addr_code = process("/usr/libexec/qemu-kvm").mark("mmu_helper_get_phys_addr_code")
{
  tl = $arg1;
  mmu_idx = $arg2;
  prim_context = $arg3;
  sec_context = $arg4;
  address = $arg5;
}
probe qemu.kvm.mmu_helper_get_phys_addr_data = process("/usr/libexec/qemu-kvm").mark("mmu_helper_get_phys_addr_data")
{
  tl = $arg1;
  mmu_idx = $arg2;
  prim_context = $arg3;
  sec_context = $arg4;
  address = $arg5;
}
probe qemu.kvm.mmu_helper_mmu_fault = process("/usr/libexec/qemu-kvm").mark("mmu_helper_mmu_fault")
{
  address = $arg1;
  paddr = $arg2;
  mmu_idx = $arg3;
  tl = $arg4;
  prim_context = $arg5;
  sec_context = $arg6;
}
probe qemu.kvm.int_helper_set_softint = process("/usr/libexec/qemu-kvm").mark("int_helper_set_softint")
{
  softint = $arg1;
}
probe qemu.kvm.int_helper_clear_softint = process("/usr/libexec/qemu-kvm").mark("int_helper_clear_softint")
{
  softint = $arg1;
}
probe qemu.kvm.int_helper_write_softint = process("/usr/libexec/qemu-kvm").mark("int_helper_write_softint")
{
  softint = $arg1;
}
probe qemu.kvm.int_helper_icache_freeze = process("/usr/libexec/qemu-kvm").mark("int_helper_icache_freeze")
{
}
probe qemu.kvm.int_helper_dcache_freeze = process("/usr/libexec/qemu-kvm").mark("int_helper_dcache_freeze")
{
}
probe qemu.kvm.win_helper_gregset_error = process("/usr/libexec/qemu-kvm").mark("win_helper_gregset_error")
{
  pstate = $arg1;
}
probe qemu.kvm.win_helper_switch_pstate = process("/usr/libexec/qemu-kvm").mark("win_helper_switch_pstate")
{
  pstate_regs = $arg1;
  new_pstate_regs = $arg2;
}
probe qemu.kvm.win_helper_no_switch_pstate = process("/usr/libexec/qemu-kvm").mark("win_helper_no_switch_pstate")
{
  new_pstate_regs = $arg1;
}
probe qemu.kvm.win_helper_wrpil = process("/usr/libexec/qemu-kvm").mark("win_helper_wrpil")
{
  psrpil = $arg1;
  new_pil = $arg2;
}
probe qemu.kvm.win_helper_done = process("/usr/libexec/qemu-kvm").mark("win_helper_done")
{
  tl = $arg1;
}
probe qemu.kvm.win_helper_retry = process("/usr/libexec/qemu-kvm").mark("win_helper_retry")
{
  tl = $arg1;
}
probe qemu.kvm.dma_bdrv_io = process("/usr/libexec/qemu-kvm").mark("dma_bdrv_io")
{
  dbs = $arg1;
  bs = $arg2;
  sector_num = $arg3;
  to_dev = $arg4;
}
probe qemu.kvm.dma_aio_cancel = process("/usr/libexec/qemu-kvm").mark("dma_aio_cancel")
{
  dbs = $arg1;
}
probe qemu.kvm.dma_complete = process("/usr/libexec/qemu-kvm").mark("dma_complete")
{
  dbs = $arg1;
  ret = $arg2;
  cb = $arg3;
}
probe qemu.kvm.dma_bdrv_cb = process("/usr/libexec/qemu-kvm").mark("dma_bdrv_cb")
{
  dbs = $arg1;
  ret = $arg2;
}
probe qemu.kvm.dma_map_wait = process("/usr/libexec/qemu-kvm").mark("dma_map_wait")
{
  dbs = $arg1;
}
probe qemu.kvm.console_gfx_new = process("/usr/libexec/qemu-kvm").mark("console_gfx_new")
{
}
probe qemu.kvm.console_txt_new = process("/usr/libexec/qemu-kvm").mark("console_txt_new")
{
  w = $arg1;
  h = $arg2;
}
probe qemu.kvm.console_select = process("/usr/libexec/qemu-kvm").mark("console_select")
{
  nr = $arg1;
}
probe qemu.kvm.console_refresh = process("/usr/libexec/qemu-kvm").mark("console_refresh")
{
  interval = $arg1;
}
probe qemu.kvm.displaysurface_create = process("/usr/libexec/qemu-kvm").mark("displaysurface_create")
{
  display_surface = $arg1;
  w = $arg2;
  h = $arg3;
}
probe qemu.kvm.displaysurface_create_from = process("/usr/libexec/qemu-kvm").mark("displaysurface_create_from")
{
  display_surface = $arg1;
  w = $arg2;
  h = $arg3;
  bpp = $arg4;
  swap = $arg5;
}
probe qemu.kvm.displaysurface_free = process("/usr/libexec/qemu-kvm").mark("displaysurface_free")
{
  display_surface = $arg1;
}
probe qemu.kvm.displaychangelistener_register = process("/usr/libexec/qemu-kvm").mark("displaychangelistener_register")
{
  dcl = $arg1;
  name = $arg2;
}
probe qemu.kvm.displaychangelistener_unregister = process("/usr/libexec/qemu-kvm").mark("displaychangelistener_unregister")
{
  dcl = $arg1;
  name = $arg2;
}
probe qemu.kvm.ppm_save = process("/usr/libexec/qemu-kvm").mark("ppm_save")
{
  filename = $arg1;
  display_surface = $arg2;
}
probe qemu.kvm.vmware_value_read = process("/usr/libexec/qemu-kvm").mark("vmware_value_read")
{
  index = $arg1;
  value = $arg2;
}
probe qemu.kvm.vmware_value_write = process("/usr/libexec/qemu-kvm").mark("vmware_value_write")
{
  index = $arg1;
  value = $arg2;
}
probe qemu.kvm.vmware_palette_read = process("/usr/libexec/qemu-kvm").mark("vmware_palette_read")
{
  index = $arg1;
  value = $arg2;
}
probe qemu.kvm.vmware_palette_write = process("/usr/libexec/qemu-kvm").mark("vmware_palette_write")
{
  index = $arg1;
  value = $arg2;
}
probe qemu.kvm.vmware_scratch_read = process("/usr/libexec/qemu-kvm").mark("vmware_scratch_read")
{
  index = $arg1;
  value = $arg2;
}
probe qemu.kvm.vmware_scratch_write = process("/usr/libexec/qemu-kvm").mark("vmware_scratch_write")
{
  index = $arg1;
  value = $arg2;
}
probe qemu.kvm.vmware_setmode = process("/usr/libexec/qemu-kvm").mark("vmware_setmode")
{
  w = $arg1;
  h = $arg2;
  bpp = $arg3;
}
probe qemu.kvm.savevm_section_start = process("/usr/libexec/qemu-kvm").mark("savevm_section_start")
{
}
probe qemu.kvm.savevm_section_end = process("/usr/libexec/qemu-kvm").mark("savevm_section_end")
{
  section_id = $arg1;
}
probe qemu.kvm.migration_bitmap_sync_start = process("/usr/libexec/qemu-kvm").mark("migration_bitmap_sync_start")
{
}
probe qemu.kvm.migration_bitmap_sync_end = process("/usr/libexec/qemu-kvm").mark("migration_bitmap_sync_end")
{
  dirty_pages = $arg1;
}
probe qemu.kvm.migration_throttle = process("/usr/libexec/qemu-kvm").mark("migration_throttle")
{
}
probe qemu.kvm.qxl_create_guest_primary = process("/usr/libexec/qemu-kvm").mark("qxl_create_guest_primary")
{
  qid = $arg1;
  width = $arg2;
  height = $arg3;
  mem = $arg4;
  format = $arg5;
  position = $arg6;
}
probe qemu.kvm.qxl_create_guest_primary_rest = process("/usr/libexec/qemu-kvm").mark("qxl_create_guest_primary_rest")
{
  qid = $arg1;
  stride = $arg2;
  type = $arg3;
  flags = $arg4;
}
probe qemu.kvm.qxl_destroy_primary = process("/usr/libexec/qemu-kvm").mark("qxl_destroy_primary")
{
  qid = $arg1;
}
probe qemu.kvm.qxl_enter_vga_mode = process("/usr/libexec/qemu-kvm").mark("qxl_enter_vga_mode")
{
  qid = $arg1;
}
probe qemu.kvm.qxl_exit_vga_mode = process("/usr/libexec/qemu-kvm").mark("qxl_exit_vga_mode")
{
  qid = $arg1;
}
probe qemu.kvm.qxl_hard_reset = process("/usr/libexec/qemu-kvm").mark("qxl_hard_reset")
{
  qid = $arg1;
  loadvm = $arg2;
}
probe qemu.kvm.qxl_interface_async_complete_io = process("/usr/libexec/qemu-kvm").mark("qxl_interface_async_complete_io")
{
  qid = $arg1;
  current_async = $arg2;
  cookie = $arg3;
}
probe qemu.kvm.qxl_interface_attach_worker = process("/usr/libexec/qemu-kvm").mark("qxl_interface_attach_worker")
{
  qid = $arg1;
}
probe qemu.kvm.qxl_interface_get_init_info = process("/usr/libexec/qemu-kvm").mark("qxl_interface_get_init_info")
{
  qid = $arg1;
}
probe qemu.kvm.qxl_interface_set_compression_level = process("/usr/libexec/qemu-kvm").mark("qxl_interface_set_compression_level")
{
  qid = $arg1;
  level = $arg2;
}
probe qemu.kvm.qxl_interface_update_area_complete = process("/usr/libexec/qemu-kvm").mark("qxl_interface_update_area_complete")
{
  qid = $arg1;
  surface_id = $arg2;
  dirty_left = $arg3;
  dirty_right = $arg4;
  dirty_top = $arg5;
  dirty_bottom = $arg6;
}
probe qemu.kvm.qxl_interface_update_area_complete_rest = process("/usr/libexec/qemu-kvm").mark("qxl_interface_update_area_complete_rest")
{
  qid = $arg1;
  num_updated_rects = $arg2;
}
probe qemu.kvm.qxl_interface_update_area_complete_overflow = process("/usr/libexec/qemu-kvm").mark("qxl_interface_update_area_complete_overflow")
{
  qid = $arg1;
  max = $arg2;
}
probe qemu.kvm.qxl_interface_update_area_complete_schedule_bh = process("/usr/libexec/qemu-kvm").mark("qxl_interface_update_area_complete_schedule_bh")
{
  qid = $arg1;
  num_dirty = $arg2;
}
probe qemu.kvm.qxl_io_destroy_primary_ignored = process("/usr/libexec/qemu-kvm").mark("qxl_io_destroy_primary_ignored")
{
  qid = $arg1;
  mode = $arg2;
}
probe qemu.kvm.qxl_io_log = process("/usr/libexec/qemu-kvm").mark("qxl_io_log")
{
  qid = $arg1;
  log_buf = $arg2;
}
probe qemu.kvm.qxl_io_read_unexpected = process("/usr/libexec/qemu-kvm").mark("qxl_io_read_unexpected")
{
  qid = $arg1;
}
probe qemu.kvm.qxl_io_unexpected_vga_mode = process("/usr/libexec/qemu-kvm").mark("qxl_io_unexpected_vga_mode")
{
  qid = $arg1;
  addr = $arg2;
  val = $arg3;
  desc = $arg4;
}
probe qemu.kvm.qxl_io_write = process("/usr/libexec/qemu-kvm").mark("qxl_io_write")
{
  qid = $arg1;
  mode = $arg2;
  addr = $arg3;
  val = $arg4;
  size = $arg5;
  async = $arg6;
}
probe qemu.kvm.qxl_memslot_add_guest = process("/usr/libexec/qemu-kvm").mark("qxl_memslot_add_guest")
{
  qid = $arg1;
  slot_id = $arg2;
  guest_start = $arg3;
  guest_end = $arg4;
}
probe qemu.kvm.qxl_post_load = process("/usr/libexec/qemu-kvm").mark("qxl_post_load")
{
  qid = $arg1;
  mode = $arg2;
}
probe qemu.kvm.qxl_pre_load = process("/usr/libexec/qemu-kvm").mark("qxl_pre_load")
{
  qid = $arg1;
}
probe qemu.kvm.qxl_pre_save = process("/usr/libexec/qemu-kvm").mark("qxl_pre_save")
{
  qid = $arg1;
}
probe qemu.kvm.qxl_reset_surfaces = process("/usr/libexec/qemu-kvm").mark("qxl_reset_surfaces")
{
  qid = $arg1;
}
probe qemu.kvm.qxl_ring_command_check = process("/usr/libexec/qemu-kvm").mark("qxl_ring_command_check")
{
  qid = $arg1;
  mode = $arg2;
}
probe qemu.kvm.qxl_ring_command_get = process("/usr/libexec/qemu-kvm").mark("qxl_ring_command_get")
{
  qid = $arg1;
  mode = $arg2;
}
probe qemu.kvm.qxl_ring_command_req_notification = process("/usr/libexec/qemu-kvm").mark("qxl_ring_command_req_notification")
{
  qid = $arg1;
}
probe qemu.kvm.qxl_ring_cursor_check = process("/usr/libexec/qemu-kvm").mark("qxl_ring_cursor_check")
{
  qid = $arg1;
  mode = $arg2;
}
probe qemu.kvm.qxl_ring_cursor_get = process("/usr/libexec/qemu-kvm").mark("qxl_ring_cursor_get")
{
  qid = $arg1;
  mode = $arg2;
}
probe qemu.kvm.qxl_ring_cursor_req_notification = process("/usr/libexec/qemu-kvm").mark("qxl_ring_cursor_req_notification")
{
  qid = $arg1;
}
probe qemu.kvm.qxl_ring_res_push = process("/usr/libexec/qemu-kvm").mark("qxl_ring_res_push")
{
  qid = $arg1;
  mode = $arg2;
  surface_count = $arg3;
  free_res = $arg4;
  last_release = $arg5;
  notify = $arg6;
}
probe qemu.kvm.qxl_ring_res_push_rest = process("/usr/libexec/qemu-kvm").mark("qxl_ring_res_push_rest")
{
  qid = $arg1;
  ring_has = $arg2;
  ring_size = $arg3;
  prod = $arg4;
  cons = $arg5;
}
probe qemu.kvm.qxl_ring_res_put = process("/usr/libexec/qemu-kvm").mark("qxl_ring_res_put")
{
  qid = $arg1;
  free_res = $arg2;
}
probe qemu.kvm.qxl_set_mode = process("/usr/libexec/qemu-kvm").mark("qxl_set_mode")
{
  qid = $arg1;
  modenr = $arg2;
  x_res = $arg3;
  y_res = $arg4;
  bits = $arg5;
  devmem = $arg6;
}
probe qemu.kvm.qxl_soft_reset = process("/usr/libexec/qemu-kvm").mark("qxl_soft_reset")
{
  qid = $arg1;
}
probe qemu.kvm.qxl_spice_destroy_surfaces_complete = process("/usr/libexec/qemu-kvm").mark("qxl_spice_destroy_surfaces_complete")
{
  qid = $arg1;
}
probe qemu.kvm.qxl_spice_destroy_surfaces = process("/usr/libexec/qemu-kvm").mark("qxl_spice_destroy_surfaces")
{
  qid = $arg1;
  async = $arg2;
}
probe qemu.kvm.qxl_spice_destroy_surface_wait_complete = process("/usr/libexec/qemu-kvm").mark("qxl_spice_destroy_surface_wait_complete")
{
  qid = $arg1;
  id = $arg2;
}
probe qemu.kvm.qxl_spice_destroy_surface_wait = process("/usr/libexec/qemu-kvm").mark("qxl_spice_destroy_surface_wait")
{
  qid = $arg1;
  id = $arg2;
  async = $arg3;
}
probe qemu.kvm.qxl_spice_flush_surfaces_async = process("/usr/libexec/qemu-kvm").mark("qxl_spice_flush_surfaces_async")
{
  qid = $arg1;
  surface_count = $arg2;
  num_free_res = $arg3;
}
probe qemu.kvm.qxl_spice_monitors_config = process("/usr/libexec/qemu-kvm").mark("qxl_spice_monitors_config")
{
  qid = $arg1;
}
probe qemu.kvm.qxl_spice_loadvm_commands = process("/usr/libexec/qemu-kvm").mark("qxl_spice_loadvm_commands")
{
  qid = $arg1;
  ext = $arg2;
  count = $arg3;
}
probe qemu.kvm.qxl_spice_oom = process("/usr/libexec/qemu-kvm").mark("qxl_spice_oom")
{
  qid = $arg1;
}
probe qemu.kvm.qxl_spice_reset_cursor = process("/usr/libexec/qemu-kvm").mark("qxl_spice_reset_cursor")
{
  qid = $arg1;
}
probe qemu.kvm.qxl_spice_reset_image_cache = process("/usr/libexec/qemu-kvm").mark("qxl_spice_reset_image_cache")
{
  qid = $arg1;
}
probe qemu.kvm.qxl_spice_reset_memslots = process("/usr/libexec/qemu-kvm").mark("qxl_spice_reset_memslots")
{
  qid = $arg1;
}
probe qemu.kvm.qxl_spice_update_area = process("/usr/libexec/qemu-kvm").mark("qxl_spice_update_area")
{
  qid = $arg1;
  surface_id = $arg2;
  left = $arg3;
  right = $arg4;
  top = $arg5;
  bottom = $arg6;
}
probe qemu.kvm.qxl_spice_update_area_rest = process("/usr/libexec/qemu-kvm").mark("qxl_spice_update_area_rest")
{
  qid = $arg1;
  num_dirty_rects = $arg2;
  clear_dirty_region = $arg3;
}
probe qemu.kvm.qxl_surfaces_dirty = process("/usr/libexec/qemu-kvm").mark("qxl_surfaces_dirty")
{
  qid = $arg1;
  surface = $arg2;
  offset = $arg3;
  size = $arg4;
}
probe qemu.kvm.qxl_send_events = process("/usr/libexec/qemu-kvm").mark("qxl_send_events")
{
  qid = $arg1;
  events = $arg2;
}
probe qemu.kvm.qxl_send_events_vm_stopped = process("/usr/libexec/qemu-kvm").mark("qxl_send_events_vm_stopped")
{
  qid = $arg1;
  events = $arg2;
}
probe qemu.kvm.qxl_set_guest_bug = process("/usr/libexec/qemu-kvm").mark("qxl_set_guest_bug")
{
  qid = $arg1;
}
probe qemu.kvm.qxl_interrupt_client_monitors_config = process("/usr/libexec/qemu-kvm").mark("qxl_interrupt_client_monitors_config")
{
  qid = $arg1;
  num_heads = $arg2;
  heads = $arg3;
}
probe qemu.kvm.qxl_client_monitors_config_unsupported_by_guest = process("/usr/libexec/qemu-kvm").mark("qxl_client_monitors_config_unsupported_by_guest")
{
  qid = $arg1;
  int_mask = $arg2;
  client_monitors_config = $arg3;
}
probe qemu.kvm.qxl_client_monitors_config_unsupported_by_device = process("/usr/libexec/qemu-kvm").mark("qxl_client_monitors_config_unsupported_by_device")
{
  qid = $arg1;
  revision = $arg2;
}
probe qemu.kvm.qxl_client_monitors_config_capped = process("/usr/libexec/qemu-kvm").mark("qxl_client_monitors_config_capped")
{
  qid = $arg1;
  requested = $arg2;
  limit_ = $arg3;
}
probe qemu.kvm.qxl_client_monitors_config_crc = process("/usr/libexec/qemu-kvm").mark("qxl_client_monitors_config_crc")
{
  qid = $arg1;
  size = $arg2;
  crc32 = $arg3;
}
probe qemu.kvm.qxl_set_client_capabilities_unsupported_by_revision = process("/usr/libexec/qemu-kvm").mark("qxl_set_client_capabilities_unsupported_by_revision")
{
  qid = $arg1;
  revision = $arg2;
}
probe qemu.kvm.qemu_spice_add_memslot = process("/usr/libexec/qemu-kvm").mark("qemu_spice_add_memslot")
{
  qid = $arg1;
  slot_id = $arg2;
  virt_start = $arg3;
  virt_end = $arg4;
  async = $arg5;
}
probe qemu.kvm.qemu_spice_del_memslot = process("/usr/libexec/qemu-kvm").mark("qemu_spice_del_memslot")
{
  qid = $arg1;
  gid = $arg2;
  slot_id = $arg3;
}
probe qemu.kvm.qemu_spice_create_primary_surface = process("/usr/libexec/qemu-kvm").mark("qemu_spice_create_primary_surface")
{
  qid = $arg1;
  sid = $arg2;
  surface = $arg3;
  async = $arg4;
}
probe qemu.kvm.qemu_spice_destroy_primary_surface = process("/usr/libexec/qemu-kvm").mark("qemu_spice_destroy_primary_surface")
{
  qid = $arg1;
  sid = $arg2;
  async = $arg3;
}
probe qemu.kvm.qemu_spice_wakeup = process("/usr/libexec/qemu-kvm").mark("qemu_spice_wakeup")
{
  qid = $arg1;
}
probe qemu.kvm.qemu_spice_create_update = process("/usr/libexec/qemu-kvm").mark("qemu_spice_create_update")
{
  left = $arg1;
  right = $arg2;
  top = $arg3;
  bottom = $arg4;
}
probe qemu.kvm.qxl_render_blit = process("/usr/libexec/qemu-kvm").mark("qxl_render_blit")
{
  stride = $arg1;
  left = $arg2;
  right = $arg3;
  top = $arg4;
  bottom = $arg5;
}
probe qemu.kvm.qxl_render_guest_primary_resized = process("/usr/libexec/qemu-kvm").mark("qxl_render_guest_primary_resized")
{
  width = $arg1;
  height = $arg2;
  stride = $arg3;
  bytes_pp = $arg4;
  bits_pp = $arg5;
}
probe qemu.kvm.qxl_render_update_area_done = process("/usr/libexec/qemu-kvm").mark("qxl_render_update_area_done")
{
  cookie = $arg1;
}
probe qemu.kvm.spapr_pci_msi = process("/usr/libexec/qemu-kvm").mark("spapr_pci_msi")
{
  msg = $arg1;
  n = $arg2;
  ca = $arg3;
}
probe qemu.kvm.spapr_pci_msi_setup = process("/usr/libexec/qemu-kvm").mark("spapr_pci_msi_setup")
{
  name = $arg1;
  vector = $arg2;
  addr = $arg3;
}
probe qemu.kvm.spapr_pci_rtas_ibm_change_msi = process("/usr/libexec/qemu-kvm").mark("spapr_pci_rtas_ibm_change_msi")
{
  func = $arg1;
  req = $arg2;
}
probe qemu.kvm.spapr_pci_rtas_ibm_query_interrupt_source_number = process("/usr/libexec/qemu-kvm").mark("spapr_pci_rtas_ibm_query_interrupt_source_number")
{
  ioa = $arg1;
  intr = $arg2;
}
probe qemu.kvm.spapr_pci_msi_write = process("/usr/libexec/qemu-kvm").mark("spapr_pci_msi_write")
{
  addr = $arg1;
  data = $arg2;
  dt_irq = $arg3;
}
probe qemu.kvm.spapr_pci_lsi_set = process("/usr/libexec/qemu-kvm").mark("spapr_pci_lsi_set")
{
  busname = $arg1;
  pin = $arg2;
  irq = $arg3;
}
probe qemu.kvm.xics_icp_check_ipi = process("/usr/libexec/qemu-kvm").mark("xics_icp_check_ipi")
{
  server = $arg1;
  mfrr = $arg2;
}
probe qemu.kvm.xics_icp_accept = process("/usr/libexec/qemu-kvm").mark("xics_icp_accept")
{
  old_xirr = $arg1;
  new_xirr = $arg2;
}
probe qemu.kvm.xics_icp_eoi = process("/usr/libexec/qemu-kvm").mark("xics_icp_eoi")
{
  server = $arg1;
  xirr = $arg2;
  new_xirr = $arg3;
}
probe qemu.kvm.xics_icp_irq = process("/usr/libexec/qemu-kvm").mark("xics_icp_irq")
{
  server = $arg1;
  nr = $arg2;
  priority = $arg3;
}
probe qemu.kvm.xics_icp_raise = process("/usr/libexec/qemu-kvm").mark("xics_icp_raise")
{
  xirr = $arg1;
  pending_priority = $arg2;
}
probe qemu.kvm.xics_set_irq_msi = process("/usr/libexec/qemu-kvm").mark("xics_set_irq_msi")
{
  srcno = $arg1;
  nr = $arg2;
}
probe qemu.kvm.xics_masked_pending = process("/usr/libexec/qemu-kvm").mark("xics_masked_pending")
{
}
probe qemu.kvm.xics_set_irq_lsi = process("/usr/libexec/qemu-kvm").mark("xics_set_irq_lsi")
{
  srcno = $arg1;
  nr = $arg2;
}
probe qemu.kvm.xics_ics_write_xive = process("/usr/libexec/qemu-kvm").mark("xics_ics_write_xive")
{
  nr = $arg1;
  srcno = $arg2;
  server = $arg3;
  priority = $arg4;
}
probe qemu.kvm.xics_ics_reject = process("/usr/libexec/qemu-kvm").mark("xics_ics_reject")
{
  nr = $arg1;
  srcno = $arg2;
}
probe qemu.kvm.xics_ics_eoi = process("/usr/libexec/qemu-kvm").mark("xics_ics_eoi")
{
  nr = $arg1;
}
probe qemu.kvm.hbitmap_iter_skip_words = process("/usr/libexec/qemu-kvm").mark("hbitmap_iter_skip_words")
{
  hb = $arg1;
  hbi = $arg2;
  pos = $arg3;
  cur = $arg4;
}
probe qemu.kvm.hbitmap_reset = process("/usr/libexec/qemu-kvm").mark("hbitmap_reset")
{
  hb = $arg1;
  start = $arg2;
  count = $arg3;
  sbit = $arg4;
  ebit = $arg5;
}
probe qemu.kvm.hbitmap_set = process("/usr/libexec/qemu-kvm").mark("hbitmap_set")
{
  hb = $arg1;
  start = $arg2;
  count = $arg3;
  sbit = $arg4;
  ebit = $arg5;
}
probe qemu.kvm.ioinst = process("/usr/libexec/qemu-kvm").mark("ioinst")
{
  insn = $arg1;
}
probe qemu.kvm.ioinst_sch_id = process("/usr/libexec/qemu-kvm").mark("ioinst_sch_id")
{
  insn = $arg1;
  cssid = $arg2;
  ssid = $arg3;
  schid = $arg4;
}
probe qemu.kvm.ioinst_chp_id = process("/usr/libexec/qemu-kvm").mark("ioinst_chp_id")
{
  insn = $arg1;
  cssid = $arg2;
  chpid = $arg3;
}
probe qemu.kvm.ioinst_chsc_cmd = process("/usr/libexec/qemu-kvm").mark("ioinst_chsc_cmd")
{
  cmd = $arg1;
  len = $arg2;
}
probe qemu.kvm.css_enable_facility = process("/usr/libexec/qemu-kvm").mark("css_enable_facility")
{
  facility = $arg1;
}
probe qemu.kvm.css_crw = process("/usr/libexec/qemu-kvm").mark("css_crw")
{
  rsc = $arg1;
  erc = $arg2;
  rsid = $arg3;
  chained = $arg4;
}
probe qemu.kvm.css_chpid_add = process("/usr/libexec/qemu-kvm").mark("css_chpid_add")
{
  cssid = $arg1;
  chpid = $arg2;
  type = $arg3;
}
probe qemu.kvm.css_new_image = process("/usr/libexec/qemu-kvm").mark("css_new_image")
{
  cssid = $arg1;
  default_cssid = $arg2;
}
probe qemu.kvm.css_assign_subch = process("/usr/libexec/qemu-kvm").mark("css_assign_subch")
{
  do_assign = $arg1;
  cssid = $arg2;
  ssid = $arg3;
  schid = $arg4;
  devno = $arg5;
}
probe qemu.kvm.css_io_interrupt = process("/usr/libexec/qemu-kvm").mark("css_io_interrupt")
{
  cssid = $arg1;
  ssid = $arg2;
  schid = $arg3;
  intparm = $arg4;
  isc = $arg5;
  conditional = $arg6;
}
probe qemu.kvm.virtio_ccw_interpret_ccw = process("/usr/libexec/qemu-kvm").mark("virtio_ccw_interpret_ccw")
{
  cssid = $arg1;
  ssid = $arg2;
  schid = $arg3;
  cmd_code = $arg4;
}
probe qemu.kvm.virtio_ccw_new_device = process("/usr/libexec/qemu-kvm").mark("virtio_ccw_new_device")
{
  cssid = $arg1;
  ssid = $arg2;
  schid = $arg3;
  devno = $arg4;
  devno_mode = $arg5;
}
probe qemu.kvm.migrate_set_state = process("/usr/libexec/qemu-kvm").mark("migrate_set_state")
{
  new_state = $arg1;
}
probe qemu.kvm.kvm_ioctl = process("/usr/libexec/qemu-kvm").mark("kvm_ioctl")
{
  type = $arg1;
  arg = $arg2;
}
probe qemu.kvm.kvm_vm_ioctl = process("/usr/libexec/qemu-kvm").mark("kvm_vm_ioctl")
{
  type = $arg1;
  arg = $arg2;
}
probe qemu.kvm.kvm_vcpu_ioctl = process("/usr/libexec/qemu-kvm").mark("kvm_vcpu_ioctl")
{
  cpu_index = $arg1;
  type = $arg2;
  arg = $arg3;
}
probe qemu.kvm.kvm_run_exit = process("/usr/libexec/qemu-kvm").mark("kvm_run_exit")
{
  cpu_index = $arg1;
  reason = $arg2;
}
probe qemu.kvm.object_dynamic_cast_assert = process("/usr/libexec/qemu-kvm").mark("object_dynamic_cast_assert")
{
  type = $arg1;
  target = $arg2;
  file = $arg3;
  line = $arg4;
  func = $arg5;
}
probe qemu.kvm.object_class_dynamic_cast_assert = process("/usr/libexec/qemu-kvm").mark("object_class_dynamic_cast_assert")
{
  type = $arg1;
  target = $arg2;
  file = $arg3;
  line = $arg4;
  func = $arg5;
}

